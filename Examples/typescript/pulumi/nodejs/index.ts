// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReadArgs, ReadResult, ReadOutputArgs } from "./read";
export const read: typeof import("./read").read = null as any;
export const readOutput: typeof import("./read").readOutput = null as any;
utilities.lazyLoad(exports, ["read","readOutput"], () => require("./read"));

export { WriteArgs, WriteResult, WriteOutputArgs } from "./write";
export const write: typeof import("./write").write = null as any;
export const writeOutput: typeof import("./write").writeOutput = null as any;
utilities.lazyLoad(exports, ["write","writeOutput"], () => require("./write"));


// Export enums:
export * from "./types/enums";

// Export sub-modules:
import * as types from "./types";

export {
    types,
};
pulumi.runtime.registerResourcePackage("pulumi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pulumi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
