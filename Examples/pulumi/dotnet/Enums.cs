// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Pulumi
{
    /// <summary>
    /// The primitive type, if any
    /// </summary>
    [EnumType]
    public readonly struct ConfigVariablesAdditionalPropertiesChoice1Of5Type : IEquatable<ConfigVariablesAdditionalPropertiesChoice1Of5Type>
    {
        private readonly string _value;

        private ConfigVariablesAdditionalPropertiesChoice1Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigVariablesAdditionalPropertiesChoice1Of5Type Boolean { get; } = new ConfigVariablesAdditionalPropertiesChoice1Of5Type("boolean");
        public static ConfigVariablesAdditionalPropertiesChoice1Of5Type Integer { get; } = new ConfigVariablesAdditionalPropertiesChoice1Of5Type("integer");
        public static ConfigVariablesAdditionalPropertiesChoice1Of5Type Number { get; } = new ConfigVariablesAdditionalPropertiesChoice1Of5Type("number");
        public static ConfigVariablesAdditionalPropertiesChoice1Of5Type @String { get; } = new ConfigVariablesAdditionalPropertiesChoice1Of5Type("string");

        public static bool operator ==(ConfigVariablesAdditionalPropertiesChoice1Of5Type left, ConfigVariablesAdditionalPropertiesChoice1Of5Type right) => left.Equals(right);
        public static bool operator !=(ConfigVariablesAdditionalPropertiesChoice1Of5Type left, ConfigVariablesAdditionalPropertiesChoice1Of5Type right) => !left.Equals(right);

        public static explicit operator string(ConfigVariablesAdditionalPropertiesChoice1Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigVariablesAdditionalPropertiesChoice1Of5Type other && Equals(other);
        public bool Equals(ConfigVariablesAdditionalPropertiesChoice1Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the union, if any
    /// </summary>
    [EnumType]
    public readonly struct ConfigVariablesAdditionalPropertiesChoice5Of5Type : IEquatable<ConfigVariablesAdditionalPropertiesChoice5Of5Type>
    {
        private readonly string _value;

        private ConfigVariablesAdditionalPropertiesChoice5Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigVariablesAdditionalPropertiesChoice5Of5Type Boolean { get; } = new ConfigVariablesAdditionalPropertiesChoice5Of5Type("boolean");
        public static ConfigVariablesAdditionalPropertiesChoice5Of5Type Integer { get; } = new ConfigVariablesAdditionalPropertiesChoice5Of5Type("integer");
        public static ConfigVariablesAdditionalPropertiesChoice5Of5Type Number { get; } = new ConfigVariablesAdditionalPropertiesChoice5Of5Type("number");
        public static ConfigVariablesAdditionalPropertiesChoice5Of5Type @String { get; } = new ConfigVariablesAdditionalPropertiesChoice5Of5Type("string");

        public static bool operator ==(ConfigVariablesAdditionalPropertiesChoice5Of5Type left, ConfigVariablesAdditionalPropertiesChoice5Of5Type right) => left.Equals(right);
        public static bool operator !=(ConfigVariablesAdditionalPropertiesChoice5Of5Type left, ConfigVariablesAdditionalPropertiesChoice5Of5Type right) => !left.Equals(right);

        public static explicit operator string(ConfigVariablesAdditionalPropertiesChoice5Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigVariablesAdditionalPropertiesChoice5Of5Type other && Equals(other);
        public bool Equals(ConfigVariablesAdditionalPropertiesChoice5Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The primitive type, if any
    /// </summary>
    [EnumType]
    public readonly struct FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type : IEquatable<FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type>
    {
        private readonly string _value;

        private FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type Boolean { get; } = new FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type("boolean");
        public static FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type Integer { get; } = new FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type("integer");
        public static FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type Number { get; } = new FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type("number");
        public static FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type @String { get; } = new FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type("string");

        public static bool operator ==(FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type left, FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type right) => left.Equals(right);
        public static bool operator !=(FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type left, FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type right) => !left.Equals(right);

        public static explicit operator string(FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type other && Equals(other);
        public bool Equals(FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice1Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the union, if any
    /// </summary>
    [EnumType]
    public readonly struct FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type : IEquatable<FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type>
    {
        private readonly string _value;

        private FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type Boolean { get; } = new FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type("boolean");
        public static FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type Integer { get; } = new FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type("integer");
        public static FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type Number { get; } = new FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type("number");
        public static FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type @String { get; } = new FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type("string");

        public static bool operator ==(FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type left, FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type right) => left.Equals(right);
        public static bool operator !=(FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type left, FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type right) => !left.Equals(right);

        public static explicit operator string(FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type other && Equals(other);
        public bool Equals(FunctionsAdditionalPropertiesInputsPropertiesAdditionalPropertiesChoice5Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The primitive type, if any
    /// </summary>
    [EnumType]
    public readonly struct FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type : IEquatable<FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type>
    {
        private readonly string _value;

        private FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type Boolean { get; } = new FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type("boolean");
        public static FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type Integer { get; } = new FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type("integer");
        public static FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type Number { get; } = new FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type("number");
        public static FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type @String { get; } = new FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type("string");

        public static bool operator ==(FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type left, FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type right) => left.Equals(right);
        public static bool operator !=(FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type left, FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type right) => !left.Equals(right);

        public static explicit operator string(FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type other && Equals(other);
        public bool Equals(FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice1Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the union, if any
    /// </summary>
    [EnumType]
    public readonly struct FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type : IEquatable<FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type>
    {
        private readonly string _value;

        private FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type Boolean { get; } = new FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type("boolean");
        public static FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type Integer { get; } = new FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type("integer");
        public static FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type Number { get; } = new FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type("number");
        public static FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type @String { get; } = new FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type("string");

        public static bool operator ==(FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type left, FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type right) => left.Equals(right);
        public static bool operator !=(FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type left, FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type right) => !left.Equals(right);

        public static explicit operator string(FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type other && Equals(other);
        public bool Equals(FunctionsAdditionalPropertiesOutputsPropertiesAdditionalPropertiesChoice5Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The primitive type, if any
    /// </summary>
    [EnumType]
    public readonly struct ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type : IEquatable<ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type>
    {
        private readonly string _value;

        private ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type Boolean { get; } = new ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type("boolean");
        public static ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type Integer { get; } = new ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type("integer");
        public static ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type Number { get; } = new ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type("number");
        public static ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type @String { get; } = new ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type("string");

        public static bool operator ==(ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type left, ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type right) => left.Equals(right);
        public static bool operator !=(ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type left, ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type right) => !left.Equals(right);

        public static explicit operator string(ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type other && Equals(other);
        public bool Equals(ProviderInputPropertiesAdditionalPropertiesChoice1Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the union, if any
    /// </summary>
    [EnumType]
    public readonly struct ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type : IEquatable<ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type>
    {
        private readonly string _value;

        private ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type Boolean { get; } = new ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type("boolean");
        public static ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type Integer { get; } = new ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type("integer");
        public static ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type Number { get; } = new ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type("number");
        public static ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type @String { get; } = new ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type("string");

        public static bool operator ==(ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type left, ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type right) => left.Equals(right);
        public static bool operator !=(ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type left, ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type right) => !left.Equals(right);

        public static explicit operator string(ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type other && Equals(other);
        public bool Equals(ProviderInputPropertiesAdditionalPropertiesChoice5Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The primitive type, if any
    /// </summary>
    [EnumType]
    public readonly struct ProviderPropertiesAdditionalPropertiesChoice1Of5Type : IEquatable<ProviderPropertiesAdditionalPropertiesChoice1Of5Type>
    {
        private readonly string _value;

        private ProviderPropertiesAdditionalPropertiesChoice1Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProviderPropertiesAdditionalPropertiesChoice1Of5Type Boolean { get; } = new ProviderPropertiesAdditionalPropertiesChoice1Of5Type("boolean");
        public static ProviderPropertiesAdditionalPropertiesChoice1Of5Type Integer { get; } = new ProviderPropertiesAdditionalPropertiesChoice1Of5Type("integer");
        public static ProviderPropertiesAdditionalPropertiesChoice1Of5Type Number { get; } = new ProviderPropertiesAdditionalPropertiesChoice1Of5Type("number");
        public static ProviderPropertiesAdditionalPropertiesChoice1Of5Type @String { get; } = new ProviderPropertiesAdditionalPropertiesChoice1Of5Type("string");

        public static bool operator ==(ProviderPropertiesAdditionalPropertiesChoice1Of5Type left, ProviderPropertiesAdditionalPropertiesChoice1Of5Type right) => left.Equals(right);
        public static bool operator !=(ProviderPropertiesAdditionalPropertiesChoice1Of5Type left, ProviderPropertiesAdditionalPropertiesChoice1Of5Type right) => !left.Equals(right);

        public static explicit operator string(ProviderPropertiesAdditionalPropertiesChoice1Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProviderPropertiesAdditionalPropertiesChoice1Of5Type other && Equals(other);
        public bool Equals(ProviderPropertiesAdditionalPropertiesChoice1Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the union, if any
    /// </summary>
    [EnumType]
    public readonly struct ProviderPropertiesAdditionalPropertiesChoice5Of5Type : IEquatable<ProviderPropertiesAdditionalPropertiesChoice5Of5Type>
    {
        private readonly string _value;

        private ProviderPropertiesAdditionalPropertiesChoice5Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProviderPropertiesAdditionalPropertiesChoice5Of5Type Boolean { get; } = new ProviderPropertiesAdditionalPropertiesChoice5Of5Type("boolean");
        public static ProviderPropertiesAdditionalPropertiesChoice5Of5Type Integer { get; } = new ProviderPropertiesAdditionalPropertiesChoice5Of5Type("integer");
        public static ProviderPropertiesAdditionalPropertiesChoice5Of5Type Number { get; } = new ProviderPropertiesAdditionalPropertiesChoice5Of5Type("number");
        public static ProviderPropertiesAdditionalPropertiesChoice5Of5Type @String { get; } = new ProviderPropertiesAdditionalPropertiesChoice5Of5Type("string");

        public static bool operator ==(ProviderPropertiesAdditionalPropertiesChoice5Of5Type left, ProviderPropertiesAdditionalPropertiesChoice5Of5Type right) => left.Equals(right);
        public static bool operator !=(ProviderPropertiesAdditionalPropertiesChoice5Of5Type left, ProviderPropertiesAdditionalPropertiesChoice5Of5Type right) => !left.Equals(right);

        public static explicit operator string(ProviderPropertiesAdditionalPropertiesChoice5Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProviderPropertiesAdditionalPropertiesChoice5Of5Type other && Equals(other);
        public bool Equals(ProviderPropertiesAdditionalPropertiesChoice5Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The primitive type, if any
    /// </summary>
    [EnumType]
    public readonly struct ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type : IEquatable<ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type>
    {
        private readonly string _value;

        private ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type Boolean { get; } = new ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type("boolean");
        public static ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type Integer { get; } = new ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type("integer");
        public static ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type Number { get; } = new ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type("number");
        public static ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type @String { get; } = new ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type("string");

        public static bool operator ==(ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type left, ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type right) => left.Equals(right);
        public static bool operator !=(ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type left, ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type right) => !left.Equals(right);

        public static explicit operator string(ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type other && Equals(other);
        public bool Equals(ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice1Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the union, if any
    /// </summary>
    [EnumType]
    public readonly struct ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type : IEquatable<ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type>
    {
        private readonly string _value;

        private ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type Boolean { get; } = new ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type("boolean");
        public static ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type Integer { get; } = new ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type("integer");
        public static ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type Number { get; } = new ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type("number");
        public static ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type @String { get; } = new ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type("string");

        public static bool operator ==(ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type left, ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type right) => left.Equals(right);
        public static bool operator !=(ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type left, ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type right) => !left.Equals(right);

        public static explicit operator string(ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type other && Equals(other);
        public bool Equals(ResourcesAdditionalPropertiesInputPropertiesAdditionalPropertiesChoice5Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The primitive type, if any
    /// </summary>
    [EnumType]
    public readonly struct ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type : IEquatable<ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type>
    {
        private readonly string _value;

        private ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type Boolean { get; } = new ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type("boolean");
        public static ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type Integer { get; } = new ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type("integer");
        public static ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type Number { get; } = new ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type("number");
        public static ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type @String { get; } = new ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type("string");

        public static bool operator ==(ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type left, ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type right) => left.Equals(right);
        public static bool operator !=(ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type left, ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type right) => !left.Equals(right);

        public static explicit operator string(ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type other && Equals(other);
        public bool Equals(ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice1Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the union, if any
    /// </summary>
    [EnumType]
    public readonly struct ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type : IEquatable<ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type>
    {
        private readonly string _value;

        private ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type Boolean { get; } = new ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type("boolean");
        public static ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type Integer { get; } = new ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type("integer");
        public static ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type Number { get; } = new ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type("number");
        public static ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type @String { get; } = new ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type("string");

        public static bool operator ==(ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type left, ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type right) => left.Equals(right);
        public static bool operator !=(ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type left, ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type right) => !left.Equals(right);

        public static explicit operator string(ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type other && Equals(other);
        public bool Equals(ResourcesAdditionalPropertiesPropertiesAdditionalPropertiesChoice5Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The primitive type, if any
    /// </summary>
    [EnumType]
    public readonly struct TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type : IEquatable<TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type>
    {
        private readonly string _value;

        private TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type Boolean { get; } = new TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type("boolean");
        public static TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type Integer { get; } = new TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type("integer");
        public static TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type Number { get; } = new TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type("number");
        public static TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type @String { get; } = new TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type("string");

        public static bool operator ==(TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type left, TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type right) => left.Equals(right);
        public static bool operator !=(TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type left, TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type right) => !left.Equals(right);

        public static explicit operator string(TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type other && Equals(other);
        public bool Equals(TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice1Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the union, if any
    /// </summary>
    [EnumType]
    public readonly struct TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type : IEquatable<TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type>
    {
        private readonly string _value;

        private TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type Boolean { get; } = new TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type("boolean");
        public static TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type Integer { get; } = new TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type("integer");
        public static TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type Number { get; } = new TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type("number");
        public static TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type @String { get; } = new TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type("string");

        public static bool operator ==(TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type left, TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type right) => left.Equals(right);
        public static bool operator !=(TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type left, TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type right) => !left.Equals(right);

        public static explicit operator string(TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type other && Equals(other);
        public bool Equals(TypesAdditionalPropertiesChoice1Of2PropertiesAdditionalPropertiesChoice5Of5Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The underlying primitive type of the enum
    /// </summary>
    [EnumType]
    public readonly struct TypesAdditionalPropertiesChoice2Of2Type : IEquatable<TypesAdditionalPropertiesChoice2Of2Type>
    {
        private readonly string _value;

        private TypesAdditionalPropertiesChoice2Of2Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TypesAdditionalPropertiesChoice2Of2Type Boolean { get; } = new TypesAdditionalPropertiesChoice2Of2Type("boolean");
        public static TypesAdditionalPropertiesChoice2Of2Type Integer { get; } = new TypesAdditionalPropertiesChoice2Of2Type("integer");
        public static TypesAdditionalPropertiesChoice2Of2Type Number { get; } = new TypesAdditionalPropertiesChoice2Of2Type("number");
        public static TypesAdditionalPropertiesChoice2Of2Type @String { get; } = new TypesAdditionalPropertiesChoice2Of2Type("string");

        public static bool operator ==(TypesAdditionalPropertiesChoice2Of2Type left, TypesAdditionalPropertiesChoice2Of2Type right) => left.Equals(right);
        public static bool operator !=(TypesAdditionalPropertiesChoice2Of2Type left, TypesAdditionalPropertiesChoice2Of2Type right) => !left.Equals(right);

        public static explicit operator string(TypesAdditionalPropertiesChoice2Of2Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TypesAdditionalPropertiesChoice2Of2Type other && Equals(other);
        public bool Equals(TypesAdditionalPropertiesChoice2Of2Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
