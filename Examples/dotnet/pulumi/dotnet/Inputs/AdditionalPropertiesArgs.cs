// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pulumi.Inputs
{

    /// <summary>
    /// Describes an object or resource property
    /// </summary>
    public sealed class AdditionalPropertiesArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalProperties")]
        private InputMap<object>? _additionalProperties;
        public InputMap<object> AdditionalProperties
        {
            get => _additionalProperties ?? (_additionalProperties = new InputMap<object>());
            set => _additionalProperties = value;
        }

        /// <summary>
        /// A reference to a primitive type. A primitive type must have only the "type" property set.
        /// </summary>
        [Input("choice1Of5")]
        public Input<Inputs.TypeSpecOneOf0Args>? Choice1Of5 { get; set; }

        /// <summary>
        /// A reference to an array type. The "type" property must be set to "array" and the "items" property must be present. No other properties may be present.
        /// </summary>
        [Input("choice2Of5")]
        public Input<Inputs.TypeSpecOneOf1Args>? Choice2Of5 { get; set; }

        /// <summary>
        /// A reference to a map type. The "type" property must be set to "object" and the "additionalProperties" property may be present. No other properties may be present.
        /// </summary>
        [Input("choice3Of5")]
        public Input<Inputs.TypeSpecOneOf2Args>? Choice3Of5 { get; set; }

        /// <summary>
        /// A reference to a type in this or another document. The "$ref" property must be present. The "type" property is ignored if it is present. No other properties may be present.
        /// </summary>
        [Input("choice4Of5")]
        public Input<Inputs.NamedTypeArgs>? Choice4Of5 { get; set; }

        /// <summary>
        /// A reference to a union type. The "oneOf" property must be present. The union may additional specify an underlying primitive type via the "type" property and a discriminator via the "discriminator" property. No other properties may be present.
        /// </summary>
        [Input("choice5Of5")]
        public Input<Inputs.TypeSpecOneOf4Args>? Choice5Of5 { get; set; }

        [Input("const")]
        public object? Const { get; set; }

        [Input("default")]
        public object? Default { get; set; }

        /// <summary>
        /// Additional information about the property's default value, if any.
        /// </summary>
        [Input("defaultInfo")]
        public Input<Inputs.DefaultInfoArgs>? DefaultInfo { get; set; }

        /// <summary>
        /// Indicates whether the property is deprecated
        /// </summary>
        [Input("deprecationMessage")]
        public Input<string>? DeprecationMessage { get; set; }

        /// <summary>
        /// The description of the property, if any. Interpreted as Markdown.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("language")]
        private InputMap<object>? _language;

        /// <summary>
        /// Additional language-specific data about the property.
        /// </summary>
        public InputMap<object> Language
        {
            get => _language ?? (_language = new InputMap<object>());
            set => _language = value;
        }

        /// <summary>
        /// Indicates that when used as an input, this type does not accept eventual values.
        /// </summary>
        [Input("plain")]
        public Input<bool>? Plain { get; set; }

        /// <summary>
        /// Specifies whether a change to the property causes its containing resource to be replaced instead of updated (default false).
        /// </summary>
        [Input("replaceOnChanges")]
        public Input<bool>? ReplaceOnChanges { get; set; }

        /// <summary>
        /// Specifies whether the property is secret (default false).
        /// </summary>
        [Input("secret")]
        public Input<bool>? Secret { get; set; }

        /// <summary>
        /// Indicates that the provider will replace the resource when this property is changed.
        /// </summary>
        [Input("willReplaceOnChanges")]
        public Input<bool>? WillReplaceOnChanges { get; set; }

        public AdditionalPropertiesArgs()
        {
        }
        public static new AdditionalPropertiesArgs Empty => new AdditionalPropertiesArgs();
    }
}
