// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pulumi.Inputs
{

    /// <summary>
    /// Describes an object or enum type.
    /// </summary>
    public sealed class TypeDefinition : global::Pulumi.InvokeArgs
    {
        [Input("additionalProperties")]
        private Dictionary<string, object>? _additionalProperties;
        public Dictionary<string, object> AdditionalProperties
        {
            get => _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>());
            set => _additionalProperties = value;
        }

        /// <summary>
        /// Describes an object type
        /// </summary>
        [Input("choice1Of2")]
        public Inputs.ObjectTypeDefinition? Choice1Of2 { get; set; }

        /// <summary>
        /// Describes an enum type
        /// </summary>
        [Input("choice2Of2")]
        public Inputs.EnumTypeDefinition? Choice2Of2 { get; set; }

        /// <summary>
        /// The description of the type, if any. Interpreted as Markdown.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Indicates that the implementation of the type should not be generated from the schema, and is instead provided out-of-band by the package author
        /// </summary>
        [Input("isOverlay")]
        public bool? IsOverlay { get; set; }

        [Input("language")]
        private Dictionary<string, object>? _language;

        /// <summary>
        /// Additional language-specific data about the type.
        /// </summary>
        public Dictionary<string, object> Language
        {
            get => _language ?? (_language = new Dictionary<string, object>());
            set => _language = value;
        }

        public TypeDefinition()
        {
        }
        public static new TypeDefinition Empty => new TypeDefinition();
    }
}
