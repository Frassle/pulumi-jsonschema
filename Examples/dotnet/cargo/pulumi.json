{
  "name": "cargo",
  "version": "1.0.0",
  "description": "A pulumi package generated from a json schema",
  "keywords": [
    "pulumi",
    "jsonschema"
  ],
  "homepage": "https://github.com/Frassle/pulumi-jsonschema",
  "repository": "https://github.com/Frassle/pulumi-jsonschema",
  "license": "Apache-2.0",
  "pluginDownloadURL": "github://api.github.com/Frassle",
  "parameterization": {
    "baseProvider": {
      "version": "0.1.1",
      "name": "jsonschema"
    },
    "parameter": "\u002BICoqTm90ZSoqOiBbY3JhdGVzLmlvXShodHRwczovL2NyYXRlcy5pby8pIGRvZXMgbm90IGFsbG93IHBhY2thZ2VzIHRvIGJlIHB1Ymxpc2hlZCB3aXRoIGBnaXRgXG4\u002BIGRlcGVuZGVuY2llcyAoYGdpdGAgW2Rldi1kZXBlbmRlbmNpZXNdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL3NwZWNpZnlpbmctZGVwZW5kZW5jaWVzLmh0bWwjZGV2ZWxvcG1lbnQtZGVwZW5kZW5jaWVzKSBhcmUgaWdub3JlZCkuIFNlZSB0aGUgW011bHRpcGxlXG4\\u002BICoqTm90ZSoqOiBXaGVuIGEgcGFja2FnZSBpcyBwdWJsaXNoZWQsIG9ubHkgZGV2LWRlcGVuZGVuY2llcyB0aGF0IHNwZWNpZnkgYVxuPiBgdmVyc2lvbmAgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgcHVibGlzaGVkIGNyYXRlLiBGb3IgbW9zdCB1c2UgY2FzZXMsXG4\u002BIGRldi1kZXBlbmRlbmNpZXMgYXJlIG5vdCBuZWVkZWQgd2hlbiBwdWJsaXNoZWQsIHRob3VnaCBzb21lIHVzZXJzIChsaWtlIE9TXG4\u002BIHBhY2thZ2VycykgbWF5IHdhbnQgdG8gcnVuIHRlc3RzIHdpdGhpbiBhIGNyYXRlLCBzbyBwcm92aWRpbmcgYSBgdmVyc2lvbmAgaWZcbj4gcG9zc2libGUgY2FuIHN0aWxsIGJlIGJlbmVmaWNpYWwuXG4iLAogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgIiRyZWYiOiAiIy9kZWZpbml0aW9ucy9EZXBlbmRlbmN5IgogICAgICAgICAgfSwKICAgICAgICAgICJ4LXRhcGxvIjogewogICAgICAgICAgICAibGlua3MiOiB7CiAgICAgICAgICAgICAgImtleSI6ICJodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9zcGVjaWZ5aW5nLWRlcGVuZGVuY2llcy5odG1sI2RldmVsb3BtZW50LWRlcGVuZGVuY2llcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBsdWdpbnMiOiBbImNyYXRlcyJdLAogICAgICAgICAgICAiY3JhdGVzIjogewogICAgICAgICAgICAgICJzY2hlbWFzIjogImRlcGVuZGVuY2llcyIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImRldl9kZXBlbmRlbmNpZXMiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiJHJlZiI6ICIjL2RlZmluaXRpb25zL0RlcGVuZGVuY3kiCiAgICAgICAgICB9LAogICAgICAgICAgIngtdGFwbG8iOiB7CiAgICAgICAgICAgICJoaWRkZW4iOiB0cnVlCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkJ1aWxkT3ZlcnJpZGUiOiB7CiAgICAgICJ0aXRsZSI6ICJCdWlsZCBPdmVycmlkZSIsCiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJQcm9maWxlIHNldHRpbmdzIGNhbiBiZSBvdmVycmlkZGVuIGZvciBzcGVjaWZpYyBwYWNrYWdlcyBhbmQgYnVpbGQtdGltZVxuY3JhdGVzLiBUbyBvdmVycmlkZSB0aGUgc2V0dGluZ3MgZm9yIGEgc3BlY2lmaWMgcGFja2FnZSwgdXNlIHRoZSBgcGFja2FnZWBcbnRhYmxlIHRvIGNoYW5nZSB0aGUgc2V0dGluZ3MgZm9yIHRoZSBuYW1lZCBwYWNrYWdlOlxuXG5gYGB0b21sXG4jIFRoZSBgZm9vYCBwYWNrYWdlIHdpbGwgdXNlIHRoZSAtQ29wdC1sZXZlbD0zIGZsYWcuXG5bcHJvZmlsZS5kZXYucGFja2FnZS5mb29dXG5vcHQtbGV2ZWwgPSAzXG5gYGBcblxuVGhlIHBhY2thZ2UgbmFtZSBpcyBhY3R1YWxseSBhIFtQYWNrYWdlIElEIFNwZWNdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL3BrZ2lkLXNwZWMuaHRtbCksIHNvIHlvdSBjYW5cbnRhcmdldCBpbmRpdmlkdWFsIHZlcnNpb25zIG9mIGEgcGFja2FnZSB3aXRoIHN5bnRheCBzdWNoIGFzXG5gW3Byb2ZpbGUuZGV2LnBhY2thZ2UuXCJmb286Mi4xLjBcIl1gLlxuXG5UbyBvdmVycmlkZSB0aGUgc2V0dGluZ3MgZm9yIGFsbCBkZXBlbmRlbmNpZXMgKGJ1dCBub3QgYW55IHdvcmtzcGFjZSBtZW1iZXIpLFxudXNlIHRoZSBgXCIqXCJgIHBhY2thZ2UgbmFtZTpcblxuYGBgdG9tbFxuIyBTZXQgdGhlIGRlZmF1bHQgZm9yIGRlcGVuZGVuY2llcy5cbltwcm9maWxlLmRldi5wYWNrYWdlLlwiKlwiXVxub3B0LWxldmVsID0gMlxuYGBgXG5cblRvIG92ZXJyaWRlIHRoZSBzZXR0aW5ncyBmb3IgYnVpbGQgc2NyaXB0cywgcHJvYyBtYWNyb3MsIGFuZCB0aGVpclxuZGVwZW5kZW5jaWVzLCB1c2UgdGhlIGBidWlsZC1vdmVycmlkZWAgdGFibGU6XG5cbmBgYHRvbWxcbiMgU2V0IHRoZSBzZXR0aW5ncyBmb3IgYnVpbGQgc2NyaXB0cyBhbmQgcHJvYy1tYWNyb3MuXG5bcHJvZmlsZS5kZXYuYnVpbGQtb3ZlcnJpZGVdXG5vcHQtbGV2ZWwgPSAzXG5gYGBcblxuPiBOb3RlOiBXaGVuIGEgZGVwZW5kZW5jeSBpcyBib3RoIGEgbm9ybWFsIGRlcGVuZGVuY3kgYW5kIGEgYnVpbGQgZGVwZW5kZW5jeSxcbj4gQ2FyZ28gd2lsbCB0cnkgdG8gb25seSBidWlsZCBpdCBvbmNlIHdoZW4gYC0tdGFyZ2V0YCBpcyBub3Qgc3BlY2lmaWVkLiBXaGVuXG4\u002BIHVzaW5nIGBidWlsZC1vdmVycmlkZWAsIHRoZSBkZXBlbmRlbmN5IG1heSBuZWVkIHRvIGJlIGJ1aWx0IHR3aWNlLCBvbmNlIGFzIGFcbj4gbm9ybWFsIGRlcGVuZGVuY3kgYW5kIG9uY2Ugd2l0aCB0aGUgb3ZlcnJpZGRlbiBidWlsZCBzZXR0aW5ncy4gVGhpcyBtYXlcbj4gaW5jcmVhc2UgaW5pdGlhbCBidWlsZCB0aW1lcy5cbiIsCiAgICAgICJhbGxPZiI6IFsKICAgICAgICB7CiAgICAgICAgICAiJHJlZiI6ICIjL2RlZmluaXRpb25zL1Byb2ZpbGUiCiAgICAgICAgfQogICAgICBdLAogICAgICAieC10YXBsbyI6IHsKICAgICAgICAiZG9jcyI6IHsKICAgICAgICAgICJtYWluIjogIlByb2ZpbGUgc2V0dGluZ3MgY2FuIGJlIG92ZXJyaWRkZW4gZm9yIHNwZWNpZmljIHBhY2thZ2VzIGFuZCBidWlsZC10aW1lXG5jcmF0ZXMuIFRvIG92ZXJyaWRlIHRoZSBzZXR0aW5ncyBmb3IgYSBzcGVjaWZpYyBwYWNrYWdlLCB1c2UgdGhlIGBwYWNrYWdlYFxudGFibGUgdG8gY2hhbmdlIHRoZSBzZXR0aW5ncyBmb3IgdGhlIG5hbWVkIHBhY2thZ2U6XG5cbmBgYHRvbWxcbiMgVGhlIGBmb29gIHBhY2thZ2Ugd2lsbCB1c2UgdGhlIC1Db3B0LWxldmVsPTMgZmxhZy5cbltwcm9maWxlLmRldi5wYWNrYWdlLmZvb11cbm9wdC1sZXZlbCA9IDNcbmBgYFxuXG5UaGUgcGFja2FnZSBuYW1lIGlzIGFjdHVhbGx5IGEgW1BhY2thZ2UgSUQgU3BlY10oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9yZWZlcmVuY2UvcGtnaWQtc3BlYy5odG1sKSwgc28geW91IGNhblxudGFyZ2V0IGluZGl2aWR1YWwgdmVyc2lvbnMgb2YgYSBwYWNrYWdlIHdpdGggc3ludGF4IHN1Y2ggYXNcbmBbcHJvZmlsZS5kZXYucGFja2FnZS5cImZvbzoyLjEuMFwiXWAuXG5cblRvIG92ZXJyaWRlIHRoZSBzZXR0aW5ncyBmb3IgYWxsIGRlcGVuZGVuY2llcyAoYnV0IG5vdCBhbnkgd29ya3NwYWNlIG1lbWJlciksXG51c2UgdGhlIGBcIipcImAgcGFja2FnZSBuYW1lOlxuXG5gYGB0b21sXG4jIFNldCB0aGUgZGVmYXVsdCBmb3IgZGVwZW5kZW5jaWVzLlxuW3Byb2ZpbGUuZGV2LnBhY2thZ2UuXCIqXCJdXG5vcHQtbGV2ZWwgPSAyXG5gYGBcblxuVG8gb3ZlcnJpZGUgdGhlIHNldHRpbmdzIGZvciBidWlsZCBzY3JpcHRzLCBwcm9jIG1hY3JvcywgYW5kIHRoZWlyXG5kZXBlbmRlbmNpZXMsIHVzZSB0aGUgYGJ1aWxkLW92ZXJyaWRlYCB0YWJsZTpcblxuYGBgdG9tbFxuIyBTZXQgdGhlIHNldHRpbmdzIGZvciBidWlsZCBzY3JpcHRzIGFuZCBwcm9jLW1hY3Jvcy5cbltwcm9maWxlLmRldi5idWlsZC1vdmVycmlkZV1cbm9wdC1sZXZlbCA9IDNcbmBgYFxuXG4\\u002BIGNvbnRpbnVlIHRvIGNvbXBpbGUsIGJ1dCB0aGV5IGFyZSBub3QgKnRlc3RlZCogYnkgZGVmYXVsdC4gU2V0dGluZyBgdGVzdCA9XG4\\u002BICoqTm90ZSoqOiBbY3JhdGVzLmlvXShodHRwczovL2NyYXRlcy5pbykgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGF1dGhvciB0byBiZSBsaXN0ZWQuIiwKICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAiaXRlbXMiOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBgYXV0aG9yc2AgZmllbGQgbGlzdHMgcGVvcGxlIG9yIG9yZ2FuaXphdGlvbnMgdGhhdCBhcmUgY29uc2lkZXJlZCB0aGVcblwiYXV0aG9yc1wiIG9mIHRoZSBwYWNrYWdlLiBUaGUgZXhhY3QgbWVhbmluZyBpcyBvcGVuIHRvIGludGVycHJldGF0aW9uIOKAlCBpdCBtYXlcbmxpc3QgdGhlIG9yaWdpbmFsIG9yIHByaW1hcnkgYXV0aG9ycywgY3VycmVudCBtYWludGFpbmVycywgb3Igb3duZXJzIG9mIHRoZVxucGFja2FnZS4gVGhlc2UgbmFtZXMgd2lsbCBiZSBsaXN0ZWQgb24gdGhlIGNyYXRlJ3MgcGFnZSBvblxuW2NyYXRlcy5pb10oaHR0cHM6Ly9jcmF0ZXMuaW8pLiBBbiBvcHRpb25hbCBlbWFpbCBhZGRyZXNzIG1heSBiZSBpbmNsdWRlZCB3aXRoaW4gYW5nbGVkXG5icmFja2V0cyBhdCB0aGUgZW5kIG9mIGVhY2ggYXV0aG9yLlxuXG4\u002BICoqTm90ZSoqOiBbY3JhdGVzLmlvXShodHRwczovL2NyYXRlcy5pbykgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGF1dGhvciB0byBiZSBsaXN0ZWQuIiwKICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICJ4LXRhcGxvIjogewogICAgICAgICAgImxpbmtzIjogewogICAgICAgICAgICAia2V5IjogImh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL21hbmlmZXN0Lmh0bWwjdGhlLWF1dGhvcnMtZmllbGQiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAieC10YXBsbyI6IHsKICAgICAgICAibGlua3MiOiB7CiAgICAgICAgICAia2V5IjogImh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL21hbmlmZXN0Lmh0bWwjdGhlLWF1dGhvcnMtZmllbGQiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkNhdGVnb3JpZXMiOiB7CiAgICAgICJ0aXRsZSI6ICJDYXRlZ29yaWVzIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBgY2F0ZWdvcmllc2AgZmllbGQgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncyBvZiB0aGUgY2F0ZWdvcmllcyB0aGlzIHBhY2thZ2VcbmJlbG9uZ3MgdG8uXG5cbmBgYHRvbWxcbmNhdGVnb3JpZXMgPSBbXCJjb21tYW5kLWxpbmUtdXRpbGl0aWVzXCIsIFwiZGV2ZWxvcG1lbnQtdG9vbHM6OmNhcmdvLXBsdWdpbnNcIl1cbmBgYFxuXG4\u002BICoqTm90ZSoqOiBbY3JhdGVzLmlvXShodHRwczovL2NyYXRlcy5pbykgaGFzIGEgbWF4aW11bSBvZiA1IGNhdGVnb3JpZXMuIEVhY2ggY2F0ZWdvcnkgc2hvdWxkXG4\u002BIG1hdGNoIG9uZSBvZiB0aGUgc3RyaW5ncyBhdmFpbGFibGUgYXQgaHR0cHM6Ly9jcmF0ZXMuaW8vY2F0ZWdvcnlfc2x1Z3MsIGFuZFxuPiBtdXN0IG1hdGNoIGV4YWN0bHkuIiwKICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAiaXRlbXMiOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBgY2F0ZWdvcmllc2AgZmllbGQgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncyBvZiB0aGUgY2F0ZWdvcmllcyB0aGlzIHBhY2thZ2VcbmJlbG9uZ3MgdG8uXG5cbmBgYHRvbWxcbmNhdGVnb3JpZXMgPSBbXCJjb21tYW5kLWxpbmUtdXRpbGl0aWVzXCIsIFwiZGV2ZWxvcG1lbnQtdG9vbHM6OmNhcmdvLXBsdWdpbnNcIl1cbmBgYFxuXG4\u002BICoqTm90ZSoqOiBbY3JhdGVzLmlvXShodHRwczovL2NyYXRlcy5pbykgaGFzIGEgbWF4aW11bSBvZiA1IGNhdGVnb3JpZXMuIEVhY2ggY2F0ZWdvcnkgc2hvdWxkXG4\\u002BIEFTQ0lJIHRleHQsIHN0YXJ0IHdpdGggYSBsZXR0ZXIsIGFuZCBvbmx5IGNvbnRhaW4gbGV0dGVycywgbnVtYmVycywgYF9gIG9yXG4\u002BIGAtYCwgYW5kIGhhdmUgYXQgbW9zdCAyMCBjaGFyYWN0ZXJzLiIsCiAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgIml0ZW1zIjogewogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYGtleXdvcmRzYCBmaWVsZCBpcyBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgZGVzY3JpYmUgdGhpcyBwYWNrYWdlLiBUaGlzXG5jYW4gaGVscCB3aGVuIHNlYXJjaGluZyBmb3IgdGhlIHBhY2thZ2Ugb24gYSByZWdpc3RyeSwgYW5kIHlvdSBtYXkgY2hvb3NlIGFueVxud29yZHMgdGhhdCB3b3VsZCBoZWxwIHNvbWVvbmUgZmluZCB0aGlzIGNyYXRlLlxuXG5gYGB0b21sXG5bcGFja2FnZV1cbiMgLi4uXG5rZXl3b3JkcyA9IFtcImdhbWVkZXZcIiwgXCJncmFwaGljc1wiXVxuYGBgXG5cbj4gKipOb3RlKio6IFtjcmF0ZXMuaW9dKGh0dHBzOi8vY3JhdGVzLmlvKSBoYXMgYSBtYXhpbXVtIG9mIDUga2V5d29yZHMuIEVhY2gga2V5d29yZCBtdXN0IGJlXG4\u002BIEFTQ0lJIHRleHQsIHN0YXJ0IHdpdGggYSBsZXR0ZXIsIGFuZCBvbmx5IGNvbnRhaW4gbGV0dGVycywgbnVtYmVycywgYF9gIG9yXG4\\u002BIGF0dHJpYnV0ZV0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy91bnN0YWJsZS1ib29rL2xpYnJhcnktZmVhdHVyZXMvdGVzdC5odG1sKSBpcyBjdXJyZW50bHlcbj4gdW5zdGFibGUgYW5kIG9ubHkgYXZhaWxhYmxlIG9uIHRoZSBbbmlnaHRseSBjaGFubmVsXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2Jvb2svYXBwZW5kaXgtMDctbmlnaHRseS1ydXN0Lmh0bWwpLiBUaGVyZSBhcmUgc29tZVxuPiBwYWNrYWdlcyBhdmFpbGFibGUgb24gW2NyYXRlcy5pb10oaHR0cHM6Ly9jcmF0ZXMuaW8va2V5d29yZHMvYmVuY2htYXJrKSB0aGF0XG4\u002BIG1heSBoZWxwIHdpdGggcnVubmluZyBiZW5jaG1hcmtzIG9uIHRoZSBzdGFibGUgY2hhbm5lbCwgc3VjaCBhc1xuPiBbQ3JpdGVyaW9uXShodHRwczovL2NyYXRlcy5pby9jcmF0ZXMvY3JpdGVyaW9uKS4iLAogICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICJpdGVtcyI6IHsKICAgICAgICAiJHJlZiI6ICIjL2RlZmluaXRpb25zL1RhcmdldCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkJlbmNobWFya3MgcHJvdmlkZSBhIHdheSB0byB0ZXN0IHRoZSBwZXJmb3JtYW5jZSBvZiB5b3VyIGNvZGUgdXNpbmcgdGhlXG5bYGNhcmdvIGJlbmNoYF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9jb21tYW5kcy9jYXJnby1iZW5jaC5odG1sKSBjb21tYW5kLiBUaGV5IGZvbGxvdyB0aGUgc2FtZSBzdHJ1Y3R1cmUgYXMgW3Rlc3RzXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9jYXJnby10YXJnZXRzLmh0bWwjdGVzdHMpLFxud2l0aCBlYWNoIGJlbmNobWFyayBmdW5jdGlvbiBhbm5vdGF0ZWQgd2l0aCB0aGUgYCNbYmVuY2hdYCBhdHRyaWJ1dGUuXG5TaW1pbGFybHkgdG8gdGVzdHM6XG5cbiogQmVuY2htYXJrcyBhcmUgcGxhY2VkIGluIHRoZSBbYGJlbmNoZXNgIGRpcmVjdG9yeV0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9ndWlkZS9wcm9qZWN0LWxheW91dC5odG1sKS5cbiogQmVuY2htYXJrIGZ1bmN0aW9ucyBkZWZpbmVkIGluIGxpYnJhcmllcyBhbmQgYmluYXJpZXMgaGF2ZSBhY2Nlc3MgdG8gdGhlXG4gICpwcml2YXRlKiBBUEkgd2l0aGluIHRoZSB0YXJnZXQgdGhleSBhcmUgZGVmaW5lZCBpbi4gQmVuY2htYXJrcyBpbiB0aGVcbiAgYGJlbmNoZXNgIGRpcmVjdG9yeSBtYXkgdXNlIHRoZSAqcHVibGljKiBBUEkuXG4qIFtUaGUgYGJlbmNoYCBmaWVsZF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9yZWZlcmVuY2UvY2FyZ28tdGFyZ2V0cy5odG1sI3RoZS1iZW5jaC1maWVsZCkgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIHdoaWNoIHRhcmdldHNcbiAgYXJlIGJlbmNobWFya2VkIGJ5IGRlZmF1bHQuXG4qIFtUaGUgYGhhcm5lc3NgIGZpZWxkXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9jYXJnby10YXJnZXRzLmh0bWwjdGhlLWhhcm5lc3MtZmllbGQpIGNhbiBiZSB1c2VkIHRvIGRpc2FibGUgdGhlXG4gIGJ1aWx0LWluIGhhcm5lc3MuXG5cbj4gKipOb3RlKio6IFRoZSBbYCNbYmVuY2hdYFxuPiBhdHRyaWJ1dGVdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvdW5zdGFibGUtYm9vay9saWJyYXJ5LWZlYXR1cmVzL3Rlc3QuaHRtbCkgaXMgY3VycmVudGx5XG4\u002BIHVuc3RhYmxlIGFuZCBvbmx5IGF2YWlsYWJsZSBvbiB0aGUgW25pZ2h0bHkgY2hhbm5lbF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9ib29rL2FwcGVuZGl4LTA3LW5pZ2h0bHktcnVzdC5odG1sKS4gVGhlcmUgYXJlIHNvbWVcbj4gcGFja2FnZXMgYXZhaWxhYmxlIG9uIFtjcmF0ZXMuaW9dKGh0dHBzOi8vY3JhdGVzLmlvL2tleXdvcmRzL2JlbmNobWFyaykgdGhhdFxuPiBtYXkgaGVscCB3aXRoIHJ1bm5pbmcgYmVuY2htYXJrcyBvbiB0aGUgc3RhYmxlIGNoYW5uZWwsIHN1Y2ggYXNcbj4gW0NyaXRlcmlvbl0oaHR0cHM6Ly9jcmF0ZXMuaW8vY3JhdGVzL2NyaXRlcmlvbikuIiwKICAgICAgICAieC10YXBsbyI6IHsKICAgICAgICAgICJsaW5rcyI6IHsKICAgICAgICAgICAgImtleSI6ICJodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9jYXJnby10YXJnZXRzLmh0bWwjYmVuY2htYXJrcyIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJ4LXRhcGxvIjogewogICAgICAgICJsaW5rcyI6IHsKICAgICAgICAgICJrZXkiOiAiaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9yZWZlcmVuY2UvY2FyZ28tdGFyZ2V0cy5odG1sI2JlbmNobWFya3MiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImJpbiI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkJpbmFyeSB0YXJnZXRzIGFyZSBleGVjdXRhYmxlIHByb2dyYW1zIHRoYXQgY2FuIGJlIHJ1biBhZnRlciBiZWluZyBjb21waWxlZC5cblRoZSBkZWZhdWx0IGJpbmFyeSBmaWxlbmFtZSBpcyBgc3JjL21haW4ucnNgLCB3aGljaCBkZWZhdWx0cyB0byB0aGUgbmFtZSBvZlxudGhlIHBhY2thZ2UuIEFkZGl0aW9uYWwgYmluYXJpZXMgYXJlIHN0b3JlZCBpbiB0aGUgW2BzcmMvYmluL2BcbmRpcmVjdG9yeV0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9ndWlkZS9wcm9qZWN0LWxheW91dC5odG1sKS4gVGhlIHNldHRpbmdzIGZvciBlYWNoIGJpbmFyeSBjYW4gYmUgW2N1c3RvbWl6ZWRdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL2NhcmdvLXRhcmdldHMuaHRtbCNjb25maWd1cmluZy1hLXRhcmdldCkgaW4gdGhlIGBbW2Jpbl1dYCB0YWJsZXMgaW4gYENhcmdvLnRvbWxgLlxuXG5CaW5hcmllcyBjYW4gdXNlIHRoZSBwdWJsaWMgQVBJIG9mIHRoZSBwYWNrYWdlJ3MgbGlicmFyeS4gVGhleSBhcmUgYWxzbyBsaW5rZWRcbndpdGggdGhlIFtgW2RlcGVuZGVuY2llc11gXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9zcGVjaWZ5aW5nLWRlcGVuZGVuY2llcy5odG1sKSBkZWZpbmVkIGluIGBDYXJnby50b21sYC5cblxuWW91IGNhbiBydW4gaW5kaXZpZHVhbCBiaW5hcmllcyB3aXRoIHRoZSBbYGNhcmdvIHJ1bmBdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vY29tbWFuZHMvY2FyZ28tcnVuLmh0bWwpIGNvbW1hbmQgd2l0aCB0aGUgYC0tYmluXG48YmluLW5hbWU\u002BYCBvcHRpb24uIFtgY2FyZ28gaW5zdGFsbGBdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vY29tbWFuZHMvY2FyZ28taW5zdGFsbC5odG1sKSBjYW4gYmUgdXNlZCB0byBjb3B5IHRoZSBleGVjdXRhYmxlIHRvIGFcbmNvbW1vbiBsb2NhdGlvbi5cblxuYGBgdG9tbFxuIyBFeGFtcGxlIG9mIGN1c3RvbWl6aW5nIGJpbmFyaWVzIGluIENhcmdvLnRvbWwuXG5bW2Jpbl1dXG5uYW1lID0gXCJjb29sLXRvb2xcIlxudGVzdCA9IGZhbHNlXG5iZW5jaCA9IGZhbHNlXG5cbltbYmluXV1cbm5hbWUgPSBcImZyb2JuaWNhdG9yXCJcbnJlcXVpcmVkLWZlYXR1cmVzID0gW1wiZnJvYm5pY2F0ZVwiXVxuYGBgIiwKICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAiaXRlbXMiOiB7CiAgICAgICAgIiRyZWYiOiAiIy9kZWZpbml0aW9ucy9UYXJnZXQiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJCaW5hcnkgdGFyZ2V0cyBhcmUgZXhlY3V0YWJsZSBwcm9ncmFtcyB0aGF0IGNhbiBiZSBydW4gYWZ0ZXIgYmVpbmcgY29tcGlsZWQuXG5UaGUgZGVmYXVsdCBiaW5hcnkgZmlsZW5hbWUgaXMgYHNyYy9tYWluLnJzYCwgd2hpY2ggZGVmYXVsdHMgdG8gdGhlIG5hbWUgb2ZcbnRoZSBwYWNrYWdlLiBBZGRpdGlvbmFsIGJpbmFyaWVzIGFyZSBzdG9yZWQgaW4gdGhlIFtgc3JjL2Jpbi9gXG5kaXJlY3RvcnldKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vZ3VpZGUvcHJvamVjdC1sYXlvdXQuaHRtbCkuIFRoZSBzZXR0aW5ncyBmb3IgZWFjaCBiaW5hcnkgY2FuIGJlIFtjdXN0b21pemVkXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9jYXJnby10YXJnZXRzLmh0bWwjY29uZmlndXJpbmctYS10YXJnZXQpIGluIHRoZSBgW1tiaW5dXWAgdGFibGVzIGluIGBDYXJnby50b21sYC5cblxuQmluYXJpZXMgY2FuIHVzZSB0aGUgcHVibGljIEFQSSBvZiB0aGUgcGFja2FnZSdzIGxpYnJhcnkuIFRoZXkgYXJlIGFsc28gbGlua2VkXG53aXRoIHRoZSBbYFtkZXBlbmRlbmNpZXNdYF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9yZWZlcmVuY2Uvc3BlY2lmeWluZy1kZXBlbmRlbmNpZXMuaHRtbCkgZGVmaW5lZCBpbiBgQ2FyZ28udG9tbGAuXG5cbllvdSBjYW4gcnVuIGluZGl2aWR1YWwgYmluYXJpZXMgd2l0aCB0aGUgW2BjYXJnbyBydW5gXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL2NvbW1hbmRzL2NhcmdvLXJ1bi5odG1sKSBjb21tYW5kIHdpdGggdGhlIGAtLWJpblxuPGJpbi1uYW1lPmAgb3B0aW9uLiBbYGNhcmdvIGluc3RhbGxgXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL2NvbW1hbmRzL2NhcmdvLWluc3RhbGwuaHRtbCkgY2FuIGJlIHVzZWQgdG8gY29weSB0aGUgZXhlY3V0YWJsZSB0byBhXG5jb21tb24gbG9jYXRpb24uXG5cbmBgYHRvbWxcbiMgRXhhbXBsZSBvZiBjdXN0b21pemluZyBiaW5hcmllcyBpbiBDYXJnby50b21sLlxuW1tiaW5dXVxubmFtZSA9IFwiY29vbC10b29sXCJcbnRlc3QgPSBmYWxzZVxuYmVuY2ggPSBmYWxzZVxuXG5bW2Jpbl1dXG5uYW1lID0gXCJmcm9ibmljYXRvclwiXG5yZXF1aXJlZC1mZWF0dXJlcyA9IFtcImZyb2JuaWNhdGVcIl1cbmBgYCIsCiAgICAgICAgIngtdGFwbG8iOiB7CiAgICAgICAgICAibGlua3MiOiB7CiAgICAgICAgICAgICJrZXkiOiAiaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9yZWZlcmVuY2UvY2FyZ28tdGFyZ2V0cy5odG1sI2JpbmFyaWVzIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIngtdGFwbG8iOiB7CiAgICAgICAgImxpbmtzIjogewogICAgICAgICAgImtleSI6ICJodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9jYXJnby10YXJnZXRzLmh0bWwjYmluYXJpZXMiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImJ1aWxkLWRlcGVuZGVuY2llcyI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIllvdSBjYW4gZGVwZW5kIG9uIG90aGVyIENhcmdvLWJhc2VkIGNyYXRlcyBmb3IgdXNlIGluIHlvdXIgYnVpbGQgc2NyaXB0cy5cbkRlcGVuZGVuY2llcyBhcmUgZGVjbGFyZWQgdGhyb3VnaCB0aGUgYGJ1aWxkLWRlcGVuZGVuY2llc2Agc2VjdGlvbiBvZiB0aGVcbm1hbmlmZXN0OlxuXG5gYGB0b21sXG5bYnVpbGQtZGVwZW5kZW5jaWVzXVxuY2MgPSBcIjEuMC4zXCJcbmBgYFxuXG5UaGUgYnVpbGQgc2NyaXB0ICoqZG9lcyBub3QqKiBoYXZlIGFjY2VzcyB0byB0aGUgZGVwZW5kZW5jaWVzIGxpc3RlZFxuaW4gdGhlIGBkZXBlbmRlbmNpZXNgIG9yIGBkZXYtZGVwZW5kZW5jaWVzYCBzZWN0aW9uLiBCdWlsZFxuZGVwZW5kZW5jaWVzIHdpbGwgbGlrZXdpc2Ugbm90IGJlIGF2YWlsYWJsZSB0byB0aGUgcGFja2FnZSBpdHNlbGZcbnVubGVzcyBsaXN0ZWQgdW5kZXIgdGhlIGBkZXBlbmRlbmNpZXNgIHNlY3Rpb24gYXMgd2VsbC4gQSBwYWNrYWdlXG5pdHNlbGYgYW5kIGl0cyBidWlsZCBzY3JpcHQgYXJlIGJ1aWx0IHNlcGFyYXRlbHksIHNvIHRoZWlyXG5kZXBlbmRlbmNpZXMgbmVlZCBub3QgY29pbmNpZGUuIENhcmdvIGlzIGtlcHQgc2ltcGxlciBhbmQgY2xlYW5lciBieVxudXNpbmcgaW5kZXBlbmRlbnQgZGVwZW5kZW5jaWVzIGZvciBpbmRlcGVuZGVudCBwdXJwb3Nlcy4iLAogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiB7CiAgICAgICAgIiRyZWYiOiAiIy9kZWZpbml0aW9ucy9EZXBlbmRlbmN5IgogICAgICB9LAogICAgICAieC10YXBsbyI6IHsKICAgICAgICAibGlua3MiOiB7CiAgICAgICAgICAia2V5IjogImh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL3NwZWNpZnlpbmctZGVwZW5kZW5jaWVzLmh0bWwjYnVpbGQtZGVwZW5kZW5jaWVzIgogICAgICAgIH0sCiAgICAgICAgInBsdWdpbnMiOiBbImNyYXRlcyJdLAogICAgICAgICJjcmF0ZXMiOiB7CiAgICAgICAgICAic2NoZW1hcyI6ICJkZXBlbmRlbmNpZXMiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImJ1aWxkX2RlcGVuZGVuY2llcyI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogewogICAgICAgICIkcmVmIjogIiMvZGVmaW5pdGlvbnMvRGVwZW5kZW5jeSIKICAgICAgfSwKICAgICAgIngtdGFwbG8iOiB7CiAgICAgICAgImhpZGRlbiI6IHRydWUKICAgICAgfQogICAgfSwKICAgICJjYXJnby1mZWF0dXJlcyI6IHsKICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAiaXRlbXMiOiB7CiAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICB9CiAgICB9LAogICAgImRlcGVuZGVuY2llcyI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkNhcmdvIGlzIGNvbmZpZ3VyZWQgdG8gbG9vayBmb3IgZGVwZW5kZW5jaWVzIG9uIFtjcmF0ZXMuaW9dKGh0dHBzOi8vY3JhdGVzLmlvKSBieSBkZWZhdWx0LiBPbmx5XG50aGUgbmFtZSBhbmQgYSB2ZXJzaW9uIHN0cmluZyBhcmUgcmVxdWlyZWQgaW4gdGhpcyBjYXNlLiBJbiBbdGhlIGNhcmdvXG5ndWlkZV0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9ndWlkZS9pbmRleC5odG1sKSwgd2Ugc3BlY2lmaWVkIGEgZGVwZW5kZW5jeSBvbiB0aGUgYHRpbWVgIGNyYXRlOlxuXG5gYGB0b21sXG5bZGVwZW5kZW5jaWVzXVxudGltZSA9IFwiMC4xLjEyXCJcbmBgYFxuXG5UaGUgc3RyaW5nIGBcIjAuMS4xMlwiYCBpcyBhIFtzZW12ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9zdGV2ZWtsYWJuaWsvc2VtdmVyI3JlcXVpcmVtZW50cykgdmVyc2lvbiByZXF1aXJlbWVudC4gU2luY2UgdGhpc1xuc3RyaW5nIGRvZXMgbm90IGhhdmUgYW55IG9wZXJhdG9ycyBpbiBpdCwgaXQgaXMgaW50ZXJwcmV0ZWQgdGhlIHNhbWUgd2F5IGFzXG5pZiB3ZSBoYWQgc3BlY2lmaWVkIGBcIl4wLjEuMTJcImAsIHdoaWNoIGlzIGNhbGxlZCBhIGNhcmV0IHJlcXVpcmVtZW50LlxuXG5BIGRlcGVuZGVuY3kgY2FuIGFsc28gYmUgZGVmaW5lZCBieSBhIHRhYmxlIHdpdGggYWRkaXRpb25hbCBvcHRpb25zOlxuXG5gYGB0b21sXG5bZGVwZW5kZW5jaWVzXVxudGltZSA9IHsgcGF0aCA9IFwiLi4vdGltZVwiLCB2ZXJzaW9uID0gXCIwLjEuMTJcIiB9XG5gYGAiLAogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiB7CiAgICAgICAgIiRyZWYiOiAiIy9kZWZpbml0aW9ucy9EZXBlbmRlbmN5IgogICAgICB9LAogICAgICAieC10YXBsbyI6IHsKICAgICAgICAibGlua3MiOiB7CiAgICAgICAgICAia2V5IjogImh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL3NwZWNpZnlpbmctZGVwZW5kZW5jaWVzLmh0bWwiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImRldi1kZXBlbmRlbmNpZXMiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZm9ybWF0IG9mIGBbZGV2LWRlcGVuZGVuY2llc11gIGlzIGVxdWl2YWxlbnQgdG8gYFtkZXBlbmRlbmNpZXNdYDpcblxuYGBgdG9tbFxuW2Rldi1kZXBlbmRlbmNpZXNdXG50ZW1wZGlyID0gXCIwLjNcIlxuYGBgXG5cbkRldi1kZXBlbmRlbmNpZXMgYXJlIG5vdCB1c2VkIHdoZW4gY29tcGlsaW5nXG5hIHBhY2thZ2UgZm9yIGJ1aWxkaW5nLCBidXQgYXJlIHVzZWQgZm9yIGNvbXBpbGluZyB0ZXN0cywgZXhhbXBsZXMsIGFuZFxuYmVuY2htYXJrcy5cblxuVGhlc2UgZGVwZW5kZW5jaWVzIGFyZSAqbm90KiBwcm9wYWdhdGVkIHRvIG90aGVyIHBhY2thZ2VzIHdoaWNoIGRlcGVuZCBvbiB0aGlzXG5wYWNrYWdlLlxuXG5Zb3UgY2FuIGFsc28gaGF2ZSB0YXJnZXQtc3BlY2lmaWMgZGV2ZWxvcG1lbnQgZGVwZW5kZW5jaWVzIGJ5IHVzaW5nXG5gZGV2LWRlcGVuZGVuY2llc2AgaW4gdGhlIHRhcmdldCBzZWN0aW9uIGhlYWRlciBpbnN0ZWFkIG9mIGBkZXBlbmRlbmNpZXNgLiBGb3JcbmV4YW1wbGU6XG5cbmBgYHRvbWxcblt0YXJnZXQuJ2NmZyh1bml4KScuZGV2LWRlcGVuZGVuY2llc11cbm1pbyA9IFwiMC4wLjFcIlxuYGBgXG5cbj4gKipOb3RlKio6IFdoZW4gYSBwYWNrYWdlIGlzIHB1Ymxpc2hlZCwgb25seSBkZXYtZGVwZW5kZW5jaWVzIHRoYXQgc3BlY2lmeSBhXG4\u002BIGB2ZXJzaW9uYCB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBwdWJsaXNoZWQgY3JhdGUuIEZvciBtb3N0IHVzZSBjYXNlcyxcbj4gZGV2LWRlcGVuZGVuY2llcyBhcmUgbm90IG5lZWRlZCB3aGVuIHB1Ymxpc2hlZCwgdGhvdWdoIHNvbWUgdXNlcnMgKGxpa2UgT1Ncbj4gcGFja2FnZXJzKSBtYXkgd2FudCB0byBydW4gdGVzdHMgd2l0aGluIGEgY3JhdGUsIHNvIHByb3ZpZGluZyBhIGB2ZXJzaW9uYCBpZlxuPiBwb3NzaWJsZSBjYW4gc3RpbGwgYmUgYmVuZWZpY2lhbC5cbiIsCiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IHsKICAgICAgICAiJHJlZiI6ICIjL2RlZmluaXRpb25zL0RlcGVuZGVuY3kiCiAgICAgIH0sCiAgICAgICJ4LXRhcGxvIjogewogICAgICAgICJsaW5rcyI6IHsKICAgICAgICAgICJrZXkiOiAiaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9yZWZlcmVuY2Uvc3BlY2lmeWluZy1kZXBlbmRlbmNpZXMuaHRtbCNkZXZlbG9wbWVudC1kZXBlbmRlbmNpZXMiCiAgICAgICAgfSwKICAgICAgICAicGx1Z2lucyI6IFsiY3JhdGVzIl0sCiAgICAgICAgImNyYXRlcyI6IHsKICAgICAgICAgICJzY2hlbWFzIjogImRlcGVuZGVuY2llcyIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiZGV2X2RlcGVuZGVuY2llcyI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogewogICAgICAgICIkcmVmIjogIiMvZGVmaW5pdGlvbnMvRGVwZW5kZW5jeSIKICAgICAgfSwKICAgICAgIngtdGFwbG8iOiB7CiAgICAgICAgImhpZGRlbiI6IHRydWUKICAgICAgfQogICAgfSwKICAgICJleGFtcGxlIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiRmlsZXMgbG9jYXRlZCB1bmRlciB0aGUgW2V4YW1wbGVzIGRpcmVjdG9yeV0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9ndWlkZS9wcm9qZWN0LWxheW91dC5odG1sKSBhcmUgZXhhbXBsZSB1c2VzIG9mIHRoZSBmdW5jdGlvbmFsaXR5IHByb3ZpZGVkIGJ5IHRoZSBsaWJyYXJ5LiBXaGVuIGNvbXBpbGVkLCB0aGV5IGFyZSBwbGFjZWQgaW4gdGhlWyB0YXJnZXQvZGVidWcvZXhhbXBsZXMgZGlyZWN0b3J5XShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL2d1aWRlL2J1aWxkLWNhY2hlLmh0bWwpLlxuXG5FeGFtcGxlcyBjYW4gdXNlIHRoZSBwdWJsaWMgQVBJIG9mIHRoZSBwYWNrYWdlJ3MgbGlicmFyeS4gVGhleSBhcmUgYWxzbyBsaW5rZWQgd2l0aCB0aGUgW2RlcGVuZGVuY2llc10oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9yZWZlcmVuY2Uvc3BlY2lmeWluZy1kZXBlbmRlbmNpZXMuaHRtbCkgYW5kIFtkZXYtZGVwZW5kZW5jaWVzXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9zcGVjaWZ5aW5nLWRlcGVuZGVuY2llcy5odG1sI2RldmVsb3BtZW50LWRlcGVuZGVuY2llcykgZGVmaW5lZCBpbiBDYXJnby50b21sLlxuXG5CeSBkZWZhdWx0LCBleGFtcGxlcyBhcmUgZXhlY3V0YWJsZSBiaW5hcmllcyAod2l0aCBhIGBtYWluKClgIGZ1bmN0aW9uKS4gWW91XG5jYW4gc3BlY2lmeSB0aGUgW2BjcmF0ZS10eXBlYCBmaWVsZF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9yZWZlcmVuY2UvY2FyZ28tdGFyZ2V0cy5odG1sI3RoZS1jcmF0ZS10eXBlLWZpZWxkKSB0byBtYWtlIGFuIGV4YW1wbGVcbmJlIGNvbXBpbGVkIGFzIGEgbGlicmFyeTpcblxuYGBgdG9tbFxuW1tleGFtcGxlXV1cbm5hbWUgPSBcImZvb1wiXG5jcmF0ZS10eXBlID0gW1wic3RhdGljbGliXCJdXG5gYGBcblxuWW91IGNhbiBydW4gaW5kaXZpZHVhbCBleGVjdXRhYmxlIGV4YW1wbGVzIHdpdGggdGhlIFtgY2FyZ28gcnVuYF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9jb21tYW5kcy9jYXJnby1ydW4uaHRtbCkgY29tbWFuZCB3aXRoXG50aGUgYC0tZXhhbXBsZSA8ZXhhbXBsZS1uYW1lPmAgb3B0aW9uLiBMaWJyYXJ5IGV4YW1wbGVzIGNhbiBiZSBidWlsdCB3aXRoXG5bYGNhcmdvIGJ1aWxkYF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9jb21tYW5kcy9jYXJnby1idWlsZC5odG1sKSB3aXRoIHRoZSBgLS1leGFtcGxlIDxleGFtcGxlLW5hbWU\u002BYCBvcHRpb24uIFtgY2FyZ28gaW5zdGFsbGBdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vY29tbWFuZHMvY2FyZ28taW5zdGFsbC5odG1sKVxud2l0aCB0aGUgYC0tZXhhbXBsZSA8ZXhhbXBsZS1uYW1lPmAgb3B0aW9uIGNhbiBiZSB1c2VkIHRvIGNvcHkgZXhlY3V0YWJsZVxuYmluYXJpZXMgdG8gYSBjb21tb24gbG9jYXRpb24uIEV4YW1wbGVzIGFyZSBjb21waWxlZCBieSBbYGNhcmdvIHRlc3RgXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL2NvbW1hbmRzL2NhcmdvLXRlc3QuaHRtbCkgYnlcbmRlZmF1bHQgdG8gcHJvdGVjdCB0aGVtIGZyb20gYml0LXJvdHRpbmcuIFNldCBbdGhlIGB0ZXN0YFxuZmllbGRdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL2NhcmdvLXRhcmdldHMuaHRtbCN0aGUtdGVzdC1maWVsZCkgdG8gYHRydWVgIGlmIHlvdSBoYXZlIGAjW3Rlc3RdYCBmdW5jdGlvbnMgaW4gdGhlXG5leGFtcGxlIHRoYXQgeW91IHdhbnQgdG8gcnVuIHdpdGggW2BjYXJnbyB0ZXN0YF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9jb21tYW5kcy9jYXJnby10ZXN0Lmh0bWwpLlxuIiwKICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAiaXRlbXMiOiB7CiAgICAgICAgIiRyZWYiOiAiIy9kZWZpbml0aW9ucy9UYXJnZXQiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJGaWxlcyBsb2NhdGVkIHVuZGVyIHRoZSBbZXhhbXBsZXMgZGlyZWN0b3J5XShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL2d1aWRlL3Byb2plY3QtbGF5b3V0Lmh0bWwpIGFyZSBleGFtcGxlIHVzZXMgb2YgdGhlIGZ1bmN0aW9uYWxpdHkgcHJvdmlkZWQgYnkgdGhlIGxpYnJhcnkuIFdoZW4gY29tcGlsZWQsIHRoZXkgYXJlIHBsYWNlZCBpbiB0aGVbIHRhcmdldC9kZWJ1Zy9leGFtcGxlcyBkaXJlY3RvcnldKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vZ3VpZGUvYnVpbGQtY2FjaGUuaHRtbCkuXG5cbkV4YW1wbGVzIGNhbiB1c2UgdGhlIHB1YmxpYyBBUEkgb2YgdGhlIHBhY2thZ2UncyBsaWJyYXJ5LiBUaGV5IGFyZSBhbHNvIGxpbmtlZCB3aXRoIHRoZSBbZGVwZW5kZW5jaWVzXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9zcGVjaWZ5aW5nLWRlcGVuZGVuY2llcy5odG1sKSBhbmQgW2Rldi1kZXBlbmRlbmNpZXNdKGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvY2FyZ28vcmVmZXJlbmNlL3NwZWNpZnlpbmctZGVwZW5kZW5jaWVzLmh0bWwjZGV2ZWxvcG1lbnQtZGVwZW5kZW5jaWVzKSBkZWZpbmVkIGluIENhcmdvLnRvbWwuXG5cbkJ5IGRlZmF1bHQsIGV4YW1wbGVzIGFyZSBleGVjdXRhYmxlIGJpbmFyaWVzICh3aXRoIGEgYG1haW4oKWAgZnVuY3Rpb24pLiBZb3VcbmNhbiBzcGVjaWZ5IHRoZSBbYGNyYXRlLXR5cGVgIGZpZWxkXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL3JlZmVyZW5jZS9jYXJnby10YXJnZXRzLmh0bWwjdGhlLWNyYXRlLXR5cGUtZmllbGQpIHRvIG1ha2UgYW4gZXhhbXBsZVxuYmUgY29tcGlsZWQgYXMgYSBsaWJyYXJ5OlxuXG5gYGB0b21sXG5bW2V4YW1wbGVdXVxubmFtZSA9IFwiZm9vXCJcbmNyYXRlLXR5cGUgPSBbXCJzdGF0aWNsaWJcIl1cbmBgYFxuXG5Zb3UgY2FuIHJ1biBpbmRpdmlkdWFsIGV4ZWN1dGFibGUgZXhhbXBsZXMgd2l0aCB0aGUgW2BjYXJnbyBydW5gXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL2NvbW1hbmRzL2NhcmdvLXJ1bi5odG1sKSBjb21tYW5kIHdpdGhcbnRoZSBgLS1leGFtcGxlIDxleGFtcGxlLW5hbWU\u002BYCBvcHRpb24uIExpYnJhcnkgZXhhbXBsZXMgY2FuIGJlIGJ1aWx0IHdpdGhcbltgY2FyZ28gYnVpbGRgXShodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL2NhcmdvL2NvbW1hbmRzL2NhcmdvLWJ1aWxkLmh0bWwpIHdpdGggdGhlIGAtLWV4YW1wbGUgPGV4YW1wbGUtbmFtZT5gIG9wdGlvbi4gW2BjYXJnbyBpbnN0YWxsYF0oaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9jb21tYW5kcy9jYXJnby1pbnN0YWxsLmh0bWwpXG53aXRoIHRoZSBgLS1leGFtcGxlIDxleGFtcGxlLW5hbWU\"
  },
  "functions": {
    "cargo:index:read": {
      "description": "Read the given JSON into the object model",
      "inputs": {
        "required": [
          "json"
        ],
        "properties": {
          "json": {
            "type": "string"
          }
        }
      },
      "outputs": {
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "$ref": "#/types/cargo:index:root"
          }
        }
      }
    },
    "cargo:index:write": {
      "description": "Read the given JSON into the object model",
      "inputs": {
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "$ref": "#/types/cargo:index:root"
          }
        }
      },
      "outputs": {
        "required": [
          "json"
        ],
        "properties": {
          "json": {
            "type": "string"
          }
        }
      }
    }
  },
  "types": {
    "cargo:index:assetsConfiguration": {
      "type": "object",
      "description": "Options for assets paths resolution and how to build assets collection",
      "properties": {
        "dependencies": {
          "type": "boolean",
          "description": "Allow build assets for dependencies."
        },
        "followSymlinks": {
          "type": "boolean"
        },
        "method": {
          "$ref": "#/types/cargo:index:method"
        },
        "overwrite": {
          "type": "boolean",
          "description": "Allow overwriting existing files."
        }
      }
    },
    "cargo:index:configuration": {
      "type": "object",
      "description": "Package build options.",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "assets": {
          "$ref": "#/types/cargo:index:assetsConfiguration"
        }
      }
    },
    "cargo:index:definitionsEdition": {
      "description": "The \u0060edition\u0060 key affects which edition your package is compiled with. Cargo\nwill always generate packages via [\u0060cargo new\u0060](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the \u0060edition\u0060 key set to the\nlatest edition. Setting the \u0060edition\u0060 key in \u0060[package]\u0060 will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc.",
      "type": "string",
      "enum": [
        {
          "value": "2015"
        },
        {
          "value": "2018"
        },
        {
          "value": "2021"
        },
        {
          "value": "2024"
        }
      ]
    },
    "cargo:index:definitionsPanic": {
      "description": "The \u0060panic\u0060 setting controls the [\u0060-C panic\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#panic) which controls which panic\nstrategy to use.\n\nWhen set to \u0060\u0022unwind\u0022\u0060, the actual value depends on the default of the target\nplatform. For example, the NVPTX platform does not support unwinding, so it\nalways uses \u0060\u0022abort\u0022\u0060.\n\nTests, benchmarks, build scripts, and proc macros ignore the \u0060panic\u0060 setting.\nThe \u0060rustc\u0060 test harness currently requires \u0060unwind\u0060 behavior. See the\n[\u0060panic-abort-tests\u0060](https://doc.rust-lang.org/cargo/reference/unstable.html#panic-abort-tests) unstable flag which enables \u0060abort\u0060 behavior.\n\nAdditionally, when using the \u0060abort\u0060 strategy and building a test, all of the\ndependencies will also be forced to built with the \u0060unwind\u0060 strategy.",
      "type": "string",
      "enum": [
        {
          "value": "unwind"
        },
        {
          "value": "abort"
        }
      ]
    },
    "cargo:index:definitionsProfile": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "buildOverride": {
          "$ref": "#/types/cargo:index:definitionsProfile"
        },
        "codegenUnits": {
          "type": "integer",
          "description": "The \u0060codegen-units\u0060 setting controls the [\u0060-C codegen-units\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units) which\ncontrols how many \u0022code generation units\u0022 a crate will be split into. More\ncode generation units allows more of a crate to be processed in parallel\npossibly reducing compile time, but may produce slower code.\n\nThis option takes an integer greater than 0.\n\nThe default is 256 for [incremental](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental) builds, and 16 for\nnon-incremental builds."
        },
        "debug": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "debugAssertions": {
          "type": "boolean",
          "description": "The \u0060debug-assertions\u0060 setting controls the [\u0060-C debug-assertions\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#debug-assertions) which\nturns \u0060cfg(debug_assertions)\u0060 [conditional compilation](https://doc.rust-lang.org/reference/conditional-compilation.html#debug_assertions) on or off. Debug\nassertions are intended to include runtime validation which is only available\nin debug/development builds. These may be things that are too expensive or\notherwise undesirable in a release build. Debug assertions enables the\n[\u0060debug_assert!\u0060 macro](https://doc.rust-lang.org/std/macro.debug_assert.html) in the standard library."
        },
        "dirName": {
          "type": "string"
        },
        "incremental": {
          "type": "boolean",
          "description": "The \u0060incremental\u0060 setting controls the [\u0060-C incremental\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#incremental) which controls\nwhether or not incremental compilation is enabled. Incremental compilation\ncauses \u0060rustc\u0060 to to save additional information to disk which will be reused\nwhen recompiling the crate, improving re-compile times. The additional\ninformation is stored in the \u0060target\u0060 directory.\n\nThe valid options are:\n\n* \u0060true\u0060: enabled\n* \u0060false\u0060: disabled\n\nIncremental compilation is only used for workspace members and \u0022path\u0022\ndependencies.\n\nThe incremental value can be overridden globally with the \u0060CARGO_INCREMENTAL\u0060\n[environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html) or the [\u0060build.incremental\u0060](https://doc.rust-lang.org/cargo/reference/config.html#buildincremental) config variable."
        },
        "inherits": {
          "type": "string"
        },
        "lto": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "optLevel": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "overflowChecks": {
          "type": "boolean",
          "description": "The \u0060overflow-checks\u0060 setting controls the [\u0060-C overflow-checks\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#overflow-checks) which\ncontrols the behavior of [runtime integer overflow](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow). When overflow-checks are\nenabled, a panic will occur on overflow."
        },
        "package": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/types/cargo:index:definitionsProfile"
          },
          "description": "Package-specific overrides.\n\nThe package name is a [Package ID Spec](https://doc.rust-lang.org/cargo/reference/pkgid-spec.html), so you can\ntarget individual versions of a package with syntax such as \u0060[profile.dev.package.\u0022foo:2.1.0\u0022]\u0060."
        },
        "panic": {
          "$ref": "#/types/cargo:index:definitionsPanic"
        },
        "rpath": {
          "type": "boolean",
          "description": "The \u0060rpath\u0060 setting controls the [\u0060-C rpath\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#rpath) which controls\nwhether or not [\u0060rpath\u0060](https://en.wikipedia.org/wiki/Rpath) is enabled."
        }
      }
    },
    "cargo:index:definitionsResolver": {
      "description": "A different feature resolver algorithm can be used by specifying the resolver version in Cargo.toml like this:\n\n[package]\nname = \u0022my-package\u0022\nversion = \u00221.0.0\u0022\nresolver = \u00222\u0022\n\nThe version \u00221\u0022 resolver is the original resolver that shipped with Cargo up to version 1.50. The default is \u00222\u0022 if the root package specifies edition = \u00222021\u0022 or a newer edition. Otherwise the default is \u00221\u0022.\n\nThe version \u00222\u0022 resolver introduces changes in feature unification. See the features chapter for more details.\n\nThe resolver is a global option that affects the entire workspace. The resolver version in dependencies is ignored, only the value in the top-level package will be used. If using a virtual workspace, the version should be specified in the [workspace] table, for example:\n\n[workspace]\nmembers = [\u0022member1\u0022, \u0022member2\u0022]\nresolver = \u00222\u0022",
      "type": "string",
      "enum": [
        {
          "value": "1"
        },
        {
          "value": "2"
        },
        {
          "value": "3"
        }
      ]
    },
    "cargo:index:definitionsTarget": {
      "type": "object",
      "description": "Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is \u0060src/main.rs\u0060, which defaults to the name of\nthe package. Additional binaries are stored in the [\u0060src/bin/\u0060\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the \u0060[[bin]]\u0060 tables in \u0060Cargo.toml\u0060.\n\nBinaries can use the public API of the package\u0027s library. They are also linked\nwith the [\u0060[dependencies]\u0060](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in \u0060Cargo.toml\u0060.\n\nYou can run individual binaries with the [\u0060cargo run\u0060](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the \u0060--bin\n\u003Cbin-name\u003E\u0060 option. [\u0060cargo install\u0060](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n\u0060\u0060\u0060toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \u0022cool-tool\u0022\ntest = false\nbench = false\n\n[[bin]]\nname = \u0022frobnicator\u0022\nrequired-features = [\u0022frobnicate\u0022]\n\u0060\u0060\u0060",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "bench": {
          "type": "boolean",
          "description": "The \u0060bench\u0060 field indicates whether or not the target is benchmarked by\ndefault by [\u0060cargo bench\u0060](https://doc.rust-lang.org/cargo/commands/cargo-bench.html). The default is \u0060true\u0060 for lib, bins, and\nbenchmarks."
        },
        "crateType": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060crate-type\u0060 field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \u0022bin\u0022 crate type.\n\nThe available options are \u0060bin\u0060, \u0060lib\u0060, \u0060rlib\u0060, \u0060dylib\u0060, \u0060cdylib\u0060,\n\u0060staticlib\u0060, and \u0060proc-macro\u0060. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."
        },
        "crateType0": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "doc": {
          "type": "boolean",
          "description": "The \u0060doc\u0060 field indicates whether or not the target is included in the\ndocumentation generated by [\u0060cargo doc\u0060](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) by default. The default is \u0060true\u0060 for\nlibraries and binaries.\n\n\u003E **Note**: The binary will be skipped if its name is the same as the lib\n\u003E target."
        },
        "doctest": {
          "type": "boolean",
          "description": "The \u0060doctest\u0060 field indicates whether or not [documentation examples](https://doc.rust-lang.org/rustdoc/documentation-tests.html) are\ntested by default by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). This is only relevant for libraries, it\nhas no effect on other sections. The default is \u0060true\u0060 for the library.\n"
        },
        "edition": {
          "$ref": "#/types/cargo:index:definitionsEdition"
        },
        "harness": {
          "type": "boolean",
          "description": "The \u0060harness\u0060 field indicates that the [\u0060--test\u0060 flag](https://doc.rust-lang.org/rustc/command-line-arguments.html#option-test) will be passed to\n\u0060rustc\u0060 which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the [\u0060#[test]\u0060 attribute](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) or benchmarks with the \u0060#[bench]\u0060 attribute. The\ndefault is \u0060true\u0060 for all targets.\n\nIf set to \u0060false\u0060, then you are responsible for defining a \u0060main()\u0060 function\nto run tests and benchmarks.\n\nTests have the [\u0060cfg(test)\u0060 conditional expression](https://doc.rust-lang.org/reference/conditional-compilation.html#test) enabled whether\nor not the harness is enabled."
        },
        "name": {
          "type": "string",
          "description": "The \u0060name\u0060 field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the \u0060[lib]\u0060 and the default binary (\u0060src/main.rs\u0060), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except \u0060[lib]\u0060."
        },
        "path": {
          "type": "string",
          "description": "The \u0060path\u0060 field specifies where the source for the crate is located, relative\nto the \u0060Cargo.toml\u0060 file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."
        },
        "plugin": {
          "type": "boolean"
        },
        "procMacro": {
          "type": "boolean",
          "description": "The \u0060proc-macro\u0060 field indicates that the library is a [procedural macro](https://doc.rust-lang.org/book/ch19-06-macros.html)\n([reference](https://doc.rust-lang.org/reference/procedural-macros.html)). This is only valid for the \u0060[lib]\u0060\ntarget."
        },
        "procMacro0": {
          "type": "boolean"
        },
        "requiredFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060required-features\u0060 field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the \u0060[[bin]]\u0060, \u0060[[bench]]\u0060,\n\u0060[[test]]\u0060, and \u0060[[example]]\u0060 sections, it has no effect on \u0060[lib]\u0060.\n\n\u0060\u0060\u0060toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \u0022my-pg-tool\u0022\nrequired-features = [\u0022postgres\u0022, \u0022tools\u0022]\n\u0060\u0060\u0060\n"
        },
        "test": {
          "type": "boolean",
          "description": "The \u0060test\u0060 field indicates whether or not the target is tested by default by\n[\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). The default is \u0060true\u0060 for lib, bins, and tests.\n\n\u003E **Note**: Examples are built by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by default to ensure they\n\u003E continue to compile, but they are not *tested* by default. Setting \u0060test =\n\u003E true\u0060 for an example will also build it as a test and run any\n\u003E [\u0060#[test]\u0060](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) functions defined in the example."
        }
      }
    },
    "cargo:index:dev": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "buildOverride": {
          "$ref": "#/types/cargo:index:dev"
        },
        "codegenUnits": {
          "type": "integer",
          "description": "The \u0060codegen-units\u0060 setting controls the [\u0060-C codegen-units\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units) which\ncontrols how many \u0022code generation units\u0022 a crate will be split into. More\ncode generation units allows more of a crate to be processed in parallel\npossibly reducing compile time, but may produce slower code.\n\nThis option takes an integer greater than 0.\n\nThe default is 256 for [incremental](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental) builds, and 16 for\nnon-incremental builds."
        },
        "debug": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "debugAssertions": {
          "type": "boolean",
          "description": "The \u0060debug-assertions\u0060 setting controls the [\u0060-C debug-assertions\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#debug-assertions) which\nturns \u0060cfg(debug_assertions)\u0060 [conditional compilation](https://doc.rust-lang.org/reference/conditional-compilation.html#debug_assertions) on or off. Debug\nassertions are intended to include runtime validation which is only available\nin debug/development builds. These may be things that are too expensive or\notherwise undesirable in a release build. Debug assertions enables the\n[\u0060debug_assert!\u0060 macro](https://doc.rust-lang.org/std/macro.debug_assert.html) in the standard library."
        },
        "dirName": {
          "type": "string"
        },
        "incremental": {
          "type": "boolean",
          "description": "The \u0060incremental\u0060 setting controls the [\u0060-C incremental\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#incremental) which controls\nwhether or not incremental compilation is enabled. Incremental compilation\ncauses \u0060rustc\u0060 to to save additional information to disk which will be reused\nwhen recompiling the crate, improving re-compile times. The additional\ninformation is stored in the \u0060target\u0060 directory.\n\nThe valid options are:\n\n* \u0060true\u0060: enabled\n* \u0060false\u0060: disabled\n\nIncremental compilation is only used for workspace members and \u0022path\u0022\ndependencies.\n\nThe incremental value can be overridden globally with the \u0060CARGO_INCREMENTAL\u0060\n[environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html) or the [\u0060build.incremental\u0060](https://doc.rust-lang.org/cargo/reference/config.html#buildincremental) config variable."
        },
        "inherits": {
          "type": "string"
        },
        "lto": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "optLevel": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "overflowChecks": {
          "type": "boolean",
          "description": "The \u0060overflow-checks\u0060 setting controls the [\u0060-C overflow-checks\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#overflow-checks) which\ncontrols the behavior of [runtime integer overflow](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow). When overflow-checks are\nenabled, a panic will occur on overflow."
        },
        "package": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/types/cargo:index:dev"
          },
          "description": "Package-specific overrides.\n\nThe package name is a [Package ID Spec](https://doc.rust-lang.org/cargo/reference/pkgid-spec.html), so you can\ntarget individual versions of a package with syntax such as \u0060[profile.dev.package.\u0022foo:2.1.0\u0022]\u0060."
        },
        "panic": {
          "$ref": "#/types/cargo:index:devPanic"
        },
        "rpath": {
          "type": "boolean",
          "description": "The \u0060rpath\u0060 setting controls the [\u0060-C rpath\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#rpath) which controls\nwhether or not [\u0060rpath\u0060](https://en.wikipedia.org/wiki/Rpath) is enabled."
        }
      }
    },
    "cargo:index:devPanic": {
      "description": "The \u0060panic\u0060 setting controls the [\u0060-C panic\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#panic) which controls which panic\nstrategy to use.\n\nWhen set to \u0060\u0022unwind\u0022\u0060, the actual value depends on the default of the target\nplatform. For example, the NVPTX platform does not support unwinding, so it\nalways uses \u0060\u0022abort\u0022\u0060.\n\nTests, benchmarks, build scripts, and proc macros ignore the \u0060panic\u0060 setting.\nThe \u0060rustc\u0060 test harness currently requires \u0060unwind\u0060 behavior. See the\n[\u0060panic-abort-tests\u0060](https://doc.rust-lang.org/cargo/reference/unstable.html#panic-abort-tests) unstable flag which enables \u0060abort\u0060 behavior.\n\nAdditionally, when using the \u0060abort\u0060 strategy and building a test, all of the\ndependencies will also be forced to built with the \u0060unwind\u0060 strategy.",
      "type": "string",
      "enum": [
        {
          "value": "unwind"
        },
        {
          "value": "abort"
        }
      ]
    },
    "cargo:index:edition": {
      "description": "The \u0060edition\u0060 key affects which edition your package is compiled with. Cargo\nwill always generate packages via [\u0060cargo new\u0060](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the \u0060edition\u0060 key set to the\nlatest edition. Setting the \u0060edition\u0060 key in \u0060[package]\u0060 will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc.",
      "type": "string",
      "enum": [
        {
          "value": "2015"
        },
        {
          "value": "2018"
        },
        {
          "value": "2021"
        },
        {
          "value": "2024"
        }
      ]
    },
    "cargo:index:items": {
      "type": "object",
      "description": "Files located under the [examples directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the[ target/debug/examples directory](https://doc.rust-lang.org/cargo/guide/build-cache.html).\n\nExamples can use the public API of the package\u0027s library. They are also linked with the [dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in Cargo.toml.\n\nBy default, examples are executable binaries (with a \u0060main()\u0060 function). You\ncan specify the [\u0060crate-type\u0060 field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-crate-type-field) to make an example\nbe compiled as a library:\n\n\u0060\u0060\u0060toml\n[[example]]\nname = \u0022foo\u0022\ncrate-type = [\u0022staticlib\u0022]\n\u0060\u0060\u0060\n\nYou can run individual executable examples with the [\u0060cargo run\u0060](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with\nthe \u0060--example \u003Cexample-name\u003E\u0060 option. Library examples can be built with\n[\u0060cargo build\u0060](https://doc.rust-lang.org/cargo/commands/cargo-build.html) with the \u0060--example \u003Cexample-name\u003E\u0060 option. [\u0060cargo install\u0060](https://doc.rust-lang.org/cargo/commands/cargo-install.html)\nwith the \u0060--example \u003Cexample-name\u003E\u0060 option can be used to copy executable\nbinaries to a common location. Examples are compiled by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by\ndefault to protect them from bit-rotting. Set [the \u0060test\u0060\nfield](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-test-field) to \u0060true\u0060 if you have \u0060#[test]\u0060 functions in the\nexample that you want to run with [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html).\n",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "bench": {
          "type": "boolean",
          "description": "The \u0060bench\u0060 field indicates whether or not the target is benchmarked by\ndefault by [\u0060cargo bench\u0060](https://doc.rust-lang.org/cargo/commands/cargo-bench.html). The default is \u0060true\u0060 for lib, bins, and\nbenchmarks."
        },
        "crateType": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060crate-type\u0060 field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \u0022bin\u0022 crate type.\n\nThe available options are \u0060bin\u0060, \u0060lib\u0060, \u0060rlib\u0060, \u0060dylib\u0060, \u0060cdylib\u0060,\n\u0060staticlib\u0060, and \u0060proc-macro\u0060. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."
        },
        "crateType0": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "doc": {
          "type": "boolean",
          "description": "The \u0060doc\u0060 field indicates whether or not the target is included in the\ndocumentation generated by [\u0060cargo doc\u0060](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) by default. The default is \u0060true\u0060 for\nlibraries and binaries.\n\n\u003E **Note**: The binary will be skipped if its name is the same as the lib\n\u003E target."
        },
        "doctest": {
          "type": "boolean",
          "description": "The \u0060doctest\u0060 field indicates whether or not [documentation examples](https://doc.rust-lang.org/rustdoc/documentation-tests.html) are\ntested by default by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). This is only relevant for libraries, it\nhas no effect on other sections. The default is \u0060true\u0060 for the library.\n"
        },
        "edition": {
          "$ref": "#/types/cargo:index:itemsEdition"
        },
        "harness": {
          "type": "boolean",
          "description": "The \u0060harness\u0060 field indicates that the [\u0060--test\u0060 flag](https://doc.rust-lang.org/rustc/command-line-arguments.html#option-test) will be passed to\n\u0060rustc\u0060 which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the [\u0060#[test]\u0060 attribute](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) or benchmarks with the \u0060#[bench]\u0060 attribute. The\ndefault is \u0060true\u0060 for all targets.\n\nIf set to \u0060false\u0060, then you are responsible for defining a \u0060main()\u0060 function\nto run tests and benchmarks.\n\nTests have the [\u0060cfg(test)\u0060 conditional expression](https://doc.rust-lang.org/reference/conditional-compilation.html#test) enabled whether\nor not the harness is enabled."
        },
        "name": {
          "type": "string",
          "description": "The \u0060name\u0060 field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the \u0060[lib]\u0060 and the default binary (\u0060src/main.rs\u0060), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except \u0060[lib]\u0060."
        },
        "path": {
          "type": "string",
          "description": "The \u0060path\u0060 field specifies where the source for the crate is located, relative\nto the \u0060Cargo.toml\u0060 file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."
        },
        "plugin": {
          "type": "boolean"
        },
        "procMacro": {
          "type": "boolean",
          "description": "The \u0060proc-macro\u0060 field indicates that the library is a [procedural macro](https://doc.rust-lang.org/book/ch19-06-macros.html)\n([reference](https://doc.rust-lang.org/reference/procedural-macros.html)). This is only valid for the \u0060[lib]\u0060\ntarget."
        },
        "procMacro0": {
          "type": "boolean"
        },
        "requiredFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060required-features\u0060 field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the \u0060[[bin]]\u0060, \u0060[[bench]]\u0060,\n\u0060[[test]]\u0060, and \u0060[[example]]\u0060 sections, it has no effect on \u0060[lib]\u0060.\n\n\u0060\u0060\u0060toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \u0022my-pg-tool\u0022\nrequired-features = [\u0022postgres\u0022, \u0022tools\u0022]\n\u0060\u0060\u0060\n"
        },
        "test": {
          "type": "boolean",
          "description": "The \u0060test\u0060 field indicates whether or not the target is tested by default by\n[\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). The default is \u0060true\u0060 for lib, bins, and tests.\n\n\u003E **Note**: Examples are built by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by default to ensure they\n\u003E continue to compile, but they are not *tested* by default. Setting \u0060test =\n\u003E true\u0060 for an example will also build it as a test and run any\n\u003E [\u0060#[test]\u0060](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) functions defined in the example."
        }
      }
    },
    "cargo:index:itemsEdition": {
      "description": "The \u0060edition\u0060 key affects which edition your package is compiled with. Cargo\nwill always generate packages via [\u0060cargo new\u0060](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the \u0060edition\u0060 key set to the\nlatest edition. Setting the \u0060edition\u0060 key in \u0060[package]\u0060 will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc.",
      "type": "string",
      "enum": [
        {
          "value": "2015"
        },
        {
          "value": "2018"
        },
        {
          "value": "2021"
        },
        {
          "value": "2024"
        }
      ]
    },
    "cargo:index:lib": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "bench": {
          "type": "boolean",
          "description": "The \u0060bench\u0060 field indicates whether or not the target is benchmarked by\ndefault by [\u0060cargo bench\u0060](https://doc.rust-lang.org/cargo/commands/cargo-bench.html). The default is \u0060true\u0060 for lib, bins, and\nbenchmarks."
        },
        "crateType": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060crate-type\u0060 field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \u0022bin\u0022 crate type.\n\nThe available options are \u0060bin\u0060, \u0060lib\u0060, \u0060rlib\u0060, \u0060dylib\u0060, \u0060cdylib\u0060,\n\u0060staticlib\u0060, and \u0060proc-macro\u0060. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."
        },
        "crateType0": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "doc": {
          "type": "boolean",
          "description": "The \u0060doc\u0060 field indicates whether or not the target is included in the\ndocumentation generated by [\u0060cargo doc\u0060](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) by default. The default is \u0060true\u0060 for\nlibraries and binaries.\n\n\u003E **Note**: The binary will be skipped if its name is the same as the lib\n\u003E target."
        },
        "doctest": {
          "type": "boolean",
          "description": "The \u0060doctest\u0060 field indicates whether or not [documentation examples](https://doc.rust-lang.org/rustdoc/documentation-tests.html) are\ntested by default by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). This is only relevant for libraries, it\nhas no effect on other sections. The default is \u0060true\u0060 for the library.\n"
        },
        "edition": {
          "$ref": "#/types/cargo:index:libEdition"
        },
        "harness": {
          "type": "boolean",
          "description": "The \u0060harness\u0060 field indicates that the [\u0060--test\u0060 flag](https://doc.rust-lang.org/rustc/command-line-arguments.html#option-test) will be passed to\n\u0060rustc\u0060 which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the [\u0060#[test]\u0060 attribute](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) or benchmarks with the \u0060#[bench]\u0060 attribute. The\ndefault is \u0060true\u0060 for all targets.\n\nIf set to \u0060false\u0060, then you are responsible for defining a \u0060main()\u0060 function\nto run tests and benchmarks.\n\nTests have the [\u0060cfg(test)\u0060 conditional expression](https://doc.rust-lang.org/reference/conditional-compilation.html#test) enabled whether\nor not the harness is enabled."
        },
        "name": {
          "type": "string",
          "description": "The \u0060name\u0060 field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the \u0060[lib]\u0060 and the default binary (\u0060src/main.rs\u0060), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except \u0060[lib]\u0060."
        },
        "path": {
          "type": "string",
          "description": "The \u0060path\u0060 field specifies where the source for the crate is located, relative\nto the \u0060Cargo.toml\u0060 file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."
        },
        "plugin": {
          "type": "boolean"
        },
        "procMacro": {
          "type": "boolean",
          "description": "The \u0060proc-macro\u0060 field indicates that the library is a [procedural macro](https://doc.rust-lang.org/book/ch19-06-macros.html)\n([reference](https://doc.rust-lang.org/reference/procedural-macros.html)). This is only valid for the \u0060[lib]\u0060\ntarget."
        },
        "procMacro0": {
          "type": "boolean"
        },
        "requiredFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060required-features\u0060 field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the \u0060[[bin]]\u0060, \u0060[[bench]]\u0060,\n\u0060[[test]]\u0060, and \u0060[[example]]\u0060 sections, it has no effect on \u0060[lib]\u0060.\n\n\u0060\u0060\u0060toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \u0022my-pg-tool\u0022\nrequired-features = [\u0022postgres\u0022, \u0022tools\u0022]\n\u0060\u0060\u0060\n"
        },
        "test": {
          "type": "boolean",
          "description": "The \u0060test\u0060 field indicates whether or not the target is tested by default by\n[\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). The default is \u0060true\u0060 for lib, bins, and tests.\n\n\u003E **Note**: Examples are built by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by default to ensure they\n\u003E continue to compile, but they are not *tested* by default. Setting \u0060test =\n\u003E true\u0060 for an example will also build it as a test and run any\n\u003E [\u0060#[test]\u0060](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) functions defined in the example."
        }
      }
    },
    "cargo:index:libEdition": {
      "description": "The \u0060edition\u0060 key affects which edition your package is compiled with. Cargo\nwill always generate packages via [\u0060cargo new\u0060](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the \u0060edition\u0060 key set to the\nlatest edition. Setting the \u0060edition\u0060 key in \u0060[package]\u0060 will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc.",
      "type": "string",
      "enum": [
        {
          "value": "2015"
        },
        {
          "value": "2018"
        },
        {
          "value": "2021"
        },
        {
          "value": "2024"
        }
      ]
    },
    "cargo:index:metadata": {
      "type": "object",
      "description": "Cargo by default will warn about unused keys in \u0060Cargo.toml\u0060 to assist in\ndetecting typos and such. The \u0060package.metadata\u0060 table, however, is completely\nignored by Cargo and will not be warned about. This section can be used for\ntools which would like to store package configuration in \u0060Cargo.toml\u0060. For\nexample:\n\n\u0060\u0060\u0060toml\n[package]\nname = \u0022...\u0022\n# ...\n\n# Metadata used when generating an Android APK, for example.\n[package.metadata.android]\npackage-name = \u0022my-awesome-android-app\u0022\nassets = \u0022path/to/static\u0022\n\u0060\u0060\u0060\n",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "playdate": {
          "$ref": "#/types/cargo:index:playdatePackageMetadata"
        }
      }
    },
    "cargo:index:method": {
      "type": "string",
      "enum": [
        {
          "value": "copy"
        },
        {
          "value": "link"
        }
      ]
    },
    "cargo:index:package": {
      "type": "object",
      "description": "The only field required by Cargo is [\u0060name\u0060](https://doc.rust-lang.org/cargo/reference/manifest.html#the-name-field).\n If publishing to a registry, the registry may\nrequire additional fields. See the notes below and [the publishing chapter](https://doc.rust-lang.org/cargo/reference/publishing.html) for requirements for publishing to [crates.io](https://crates.io/).",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "authors": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "autobenches": {
          "type": "boolean",
          "description": "Disable automatic discovery of \u0060bench\u0060 targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n\u0060bin\u0060, this would present a problem because Cargo would usually attempt to\ncompile anything in the \u0060bin\u0060 directory as an executable. Here is a sample\nlayout of this scenario:\n\n\u0060\u0060\u0060\n\u251C\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u251C\u2500\u2500 lib.rs\n    \u2514\u2500\u2500 bin\n        \u2514\u2500\u2500 mod.rs\n\u0060\u0060\u0060\n"
        },
        "autobins": {
          "type": "boolean",
          "description": "Disable automatic discovery of \u0060bin\u0060 targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n\u0060bin\u0060, this would present a problem because Cargo would usually attempt to\ncompile anything in the \u0060bin\u0060 directory as an executable. Here is a sample\nlayout of this scenario:\n\n\u0060\u0060\u0060\n\u251C\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u251C\u2500\u2500 lib.rs\n    \u2514\u2500\u2500 bin\n        \u2514\u2500\u2500 mod.rs\n\u0060\u0060\u0060\n\nTo prevent Cargo from inferring \u0060src/bin/mod.rs\u0060 as an executable, set\nthis to \u0060false\u0060 to disable auto-discovery."
        },
        "autoexamples": {
          "type": "boolean",
          "description": "Disable automatic discovery of \u0060example\u0060 targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n\u0060bin\u0060, this would present a problem because Cargo would usually attempt to\ncompile anything in the \u0060bin\u0060 directory as an executable. Here is a sample\nlayout of this scenario:\n\n\u0060\u0060\u0060\n\u251C\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u251C\u2500\u2500 lib.rs\n    \u2514\u2500\u2500 bin\n        \u2514\u2500\u2500 mod.rs\n\u0060\u0060\u0060\n"
        },
        "autotests": {
          "type": "boolean",
          "description": "Disable automatic discovery of \u0060test\u0060 targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n\u0060bin\u0060, this would present a problem because Cargo would usually attempt to\ncompile anything in the \u0060bin\u0060 directory as an executable. Here is a sample\nlayout of this scenario:\n\n\u0060\u0060\u0060\n\u251C\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u251C\u2500\u2500 lib.rs\n    \u2514\u2500\u2500 bin\n        \u2514\u2500\u2500 mod.rs\n\u0060\u0060\u0060\n"
        },
        "build": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.AnyOfKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "categories": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "defaultRun": {
          "type": "string",
          "description": "The \u0060default-run\u0060 field in the \u0060[package]\u0060 section of the manifest can be used\nto specify a default binary picked by [\u0060cargo run\u0060](https://doc.rust-lang.org/cargo/commands/cargo-run.html). For example, when there is\nboth \u0060src/bin/a.rs\u0060 and \u0060src/bin/b.rs\u0060:\n\n\u0060\u0060\u0060toml\n[package]\ndefault-run = \u0022a\u0022\n\u0060\u0060\u0060"
        },
        "description": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "documentation": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "edition": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "exclude": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "homepage": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "imATeapot": {
          "type": "boolean",
          "description": "Sets whether the current package is a teapot or something else that is not capable of brewing tea."
        },
        "include": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "keywords": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "license": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "licenseFile": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "links": {
          "type": "string",
          "description": "The \u0060links\u0060 field specifies the name of a native library that is being linked\nto. More information can be found in the [\u0060links\u0060](https://doc.rust-lang.org/cargo/reference/build-scripts.html#the-links-manifest-key) section of the build\nscript guide.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nlinks = \u0022foo\u0022\n\u0060\u0060\u0060"
        },
        "metabuild": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "$ref": "#/types/cargo:index:metadata"
        },
        "name": {
          "type": "string",
          "description": "The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.\n\nThe name must use only [alphanumeric](https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric) characters or \u0060-\u0060 or \u0060_\u0060, and cannot be empty.\nNote that [\u0060cargo new\u0060](https://doc.rust-lang.org/cargo/commands/cargo-new.html) and [\u0060cargo init\u0060](https://doc.rust-lang.org/cargo/commands/cargo-init.html) impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. [crates.io](https://crates.io) imposes even more restrictions, such as\nenforcing only ASCII characters, not a reserved name, not a special Windows\nname such as \u0022nul\u0022, is not too long, etc."
        },
        "namespacedFeatures": {
          "type": "boolean"
        },
        "publish": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "publishLockfile": {
          "type": "boolean"
        },
        "readme": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "repository": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "resolver": {
          "$ref": "#/types/cargo:index:resolver"
        },
        "rustVersion": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "version": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "workspace": {
          "type": "string",
          "description": "The \u0060workspace\u0060 field can be used to configure the workspace that this package\nwill be a member of. If not specified this will be inferred as the first\nCargo.toml with \u0060[workspace]\u0060 upwards in the filesystem. Setting this is\nuseful if the member is not inside a subdirectory of the workspace root.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nworkspace = \u0022path/to/workspace/root\u0022\n\u0060\u0060\u0060\n\nThis field cannot be specified if the manifest already has a \u0060[workspace]\u0060\ntable defined. That is, a crate cannot both be a root crate in a workspace\n(contain \u0060[workspace]\u0060) and also be a member crate of another workspace\n(contain \u0060package.workspace\u0060).\n\nFor more information, see the [workspaces chapter](https://doc.rust-lang.org/cargo/reference/workspaces.html)."
        }
      },
      "required": [
        "name"
      ]
    },
    "cargo:index:packageEdition": {
      "description": "The \u0060edition\u0060 key affects which edition your package is compiled with. Cargo\nwill always generate packages via [\u0060cargo new\u0060](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the \u0060edition\u0060 key set to the\nlatest edition. Setting the \u0060edition\u0060 key in \u0060[package]\u0060 will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc.",
      "type": "string",
      "enum": [
        {
          "value": "2015"
        },
        {
          "value": "2018"
        },
        {
          "value": "2021"
        },
        {
          "value": "2024"
        }
      ]
    },
    "cargo:index:panic": {
      "description": "The \u0060panic\u0060 setting controls the [\u0060-C panic\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#panic) which controls which panic\nstrategy to use.\n\nWhen set to \u0060\u0022unwind\u0022\u0060, the actual value depends on the default of the target\nplatform. For example, the NVPTX platform does not support unwinding, so it\nalways uses \u0060\u0022abort\u0022\u0060.\n\nTests, benchmarks, build scripts, and proc macros ignore the \u0060panic\u0060 setting.\nThe \u0060rustc\u0060 test harness currently requires \u0060unwind\u0060 behavior. See the\n[\u0060panic-abort-tests\u0060](https://doc.rust-lang.org/cargo/reference/unstable.html#panic-abort-tests) unstable flag which enables \u0060abort\u0060 behavior.\n\nAdditionally, when using the \u0060abort\u0060 strategy and building a test, all of the\ndependencies will also be forced to built with the \u0060unwind\u0060 strategy.",
      "type": "string",
      "enum": [
        {
          "value": "unwind"
        },
        {
          "value": "abort"
        }
      ]
    },
    "cargo:index:platform": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "buildDependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          },
          "description": "You can depend on other Cargo-based crates for use in your build scripts.\nDependencies are declared through the \u0060build-dependencies\u0060 section of the\nmanifest:\n\n\u0060\u0060\u0060toml\n[build-dependencies]\ncc = \u00221.0.3\u0022\n\u0060\u0060\u0060\n\nThe build script **does not** have access to the dependencies listed\nin the \u0060dependencies\u0060 or \u0060dev-dependencies\u0060 section. Build\ndependencies will likewise not be available to the package itself\nunless listed under the \u0060dependencies\u0060 section as well. A package\nitself and its build script are built separately, so their\ndependencies need not coincide. Cargo is kept simpler and cleaner by\nusing independent dependencies for independent purposes."
        },
        "buildDependencies0": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          },
          "description": "Cargo is configured to look for dependencies on [crates.io](https://crates.io) by default. Only\nthe name and a version string are required in this case. In [the cargo\nguide](https://doc.rust-lang.org/cargo/guide/index.html), we specified a dependency on the \u0060time\u0060 crate:\n\n\u0060\u0060\u0060toml\n[dependencies]\ntime = \u00220.1.12\u0022\n\u0060\u0060\u0060\n\nThe string \u0060\u00220.1.12\u0022\u0060 is a [semver](https://github.com/steveklabnik/semver#requirements) version requirement. Since this\nstring does not have any operators in it, it is interpreted the same way as\nif we had specified \u0060\u0022^0.1.12\u0022\u0060, which is called a caret requirement.\n\nA dependency can also be defined by a table with additional options:\n\n\u0060\u0060\u0060toml\n[dependencies]\ntime = { path = \u0022../time\u0022, version = \u00220.1.12\u0022 }\n\u0060\u0060\u0060"
        },
        "devDependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          },
          "description": "The format of \u0060[dev-dependencies]\u0060 is equivalent to \u0060[dependencies]\u0060:\n\n\u0060\u0060\u0060toml\n[dev-dependencies]\ntempdir = \u00220.3\u0022\n\u0060\u0060\u0060\n\nDev-dependencies are not used when compiling\na package for building, but are used for compiling tests, examples, and\nbenchmarks.\n\nThese dependencies are *not* propagated to other packages which depend on this\npackage.\n\nYou can also have target-specific development dependencies by using\n\u0060dev-dependencies\u0060 in the target section header instead of \u0060dependencies\u0060. For\nexample:\n\n\u0060\u0060\u0060toml\n[target.\u0027cfg(unix)\u0027.dev-dependencies]\nmio = \u00220.0.1\u0022\n\u0060\u0060\u0060\n\n\u003E **Note**: When a package is published, only dev-dependencies that specify a\n\u003E \u0060version\u0060 will be included in the published crate. For most use cases,\n\u003E dev-dependencies are not needed when published, though some users (like OS\n\u003E packagers) may want to run tests within a crate, so providing a \u0060version\u0060 if\n\u003E possible can still be beneficial.\n"
        },
        "devDependencies0": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        }
      }
    },
    "cargo:index:playdatePackageMetadata": {
      "type": "object",
      "description": "Metadata and build configuration.",
      "properties": {
        "assets": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "author": {
          "type": "string"
        },
        "buildNumber": {
          "type": "integer",
          "description": "A monotonically-increasing integer value used to indicate a unique version of your game. This can be set using an automated build process like Continuous Integration to avoid having to set the value by hand.\n\nFor sideloaded games, buildNumber is required and is used to determine when a newer version is available to download."
        },
        "bundleId": {
          "type": "string",
          "description": "A unique identifier for your game, in reverse DNS notation."
        },
        "contentWarning": {
          "type": "string",
          "description": "Optional. A content warning that displays when the user launches your game for the first time. The user will have the option of backing out and not launching your game if they choose."
        },
        "contentWarning2": {
          "type": "string",
          "description": "Optional. A second content warning that displays on a second screen when the user launches your game for the first time. The user will have the option of backing out and not launching your game if they choose.\n\nNote: \u0060content-warning2\u0060 will only display if a \u0060content-warning\u0060 attribute is also specified.\n\nThe string displayed on the content warning screen can only be so long before it will be truncated with an \u0022\u2026\u0022 character. Be sure to keep this in mind when designing your \u0060content-warning\u0060 and \u0060content-warning2\u0060 text."
        },
        "description": {
          "type": "string"
        },
        "devAssets": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.AnyOfKeyword"
        },
        "imagePath": {
          "type": "string",
          "description": "A directory of images that will be used by the launcher.\n\nMore in [official documentation](https://sdk.play.date/#pdxinfo)."
        },
        "launchSoundPath": {
          "type": "string",
          "description": "Should point to the path of a short audio file to be played as the game launch animation is taking place.\n\nMore in [official documentation](https://sdk.play.date/#pdxinfo)."
        },
        "name": {
          "type": "string",
          "description": "A game version number, formatted any way you wish, that is displayed to players. It is not used to compute when updates should occur."
        },
        "options": {
          "$ref": "#/types/cargo:index:configuration"
        },
        "support": {
          "$ref": "#/types/cargo:index:support"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "bundleId"
      ]
    },
    "cargo:index:profile": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "buildOverride": {
          "$ref": "#/types/cargo:index:profile"
        },
        "codegenUnits": {
          "type": "integer",
          "description": "The \u0060codegen-units\u0060 setting controls the [\u0060-C codegen-units\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units) which\ncontrols how many \u0022code generation units\u0022 a crate will be split into. More\ncode generation units allows more of a crate to be processed in parallel\npossibly reducing compile time, but may produce slower code.\n\nThis option takes an integer greater than 0.\n\nThe default is 256 for [incremental](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental) builds, and 16 for\nnon-incremental builds."
        },
        "debug": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "debugAssertions": {
          "type": "boolean",
          "description": "The \u0060debug-assertions\u0060 setting controls the [\u0060-C debug-assertions\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#debug-assertions) which\nturns \u0060cfg(debug_assertions)\u0060 [conditional compilation](https://doc.rust-lang.org/reference/conditional-compilation.html#debug_assertions) on or off. Debug\nassertions are intended to include runtime validation which is only available\nin debug/development builds. These may be things that are too expensive or\notherwise undesirable in a release build. Debug assertions enables the\n[\u0060debug_assert!\u0060 macro](https://doc.rust-lang.org/std/macro.debug_assert.html) in the standard library."
        },
        "dirName": {
          "type": "string"
        },
        "incremental": {
          "type": "boolean",
          "description": "The \u0060incremental\u0060 setting controls the [\u0060-C incremental\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#incremental) which controls\nwhether or not incremental compilation is enabled. Incremental compilation\ncauses \u0060rustc\u0060 to to save additional information to disk which will be reused\nwhen recompiling the crate, improving re-compile times. The additional\ninformation is stored in the \u0060target\u0060 directory.\n\nThe valid options are:\n\n* \u0060true\u0060: enabled\n* \u0060false\u0060: disabled\n\nIncremental compilation is only used for workspace members and \u0022path\u0022\ndependencies.\n\nThe incremental value can be overridden globally with the \u0060CARGO_INCREMENTAL\u0060\n[environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html) or the [\u0060build.incremental\u0060](https://doc.rust-lang.org/cargo/reference/config.html#buildincremental) config variable."
        },
        "inherits": {
          "type": "string"
        },
        "lto": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "optLevel": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "overflowChecks": {
          "type": "boolean",
          "description": "The \u0060overflow-checks\u0060 setting controls the [\u0060-C overflow-checks\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#overflow-checks) which\ncontrols the behavior of [runtime integer overflow](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow). When overflow-checks are\nenabled, a panic will occur on overflow."
        },
        "package": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/types/cargo:index:profile"
          },
          "description": "Package-specific overrides.\n\nThe package name is a [Package ID Spec](https://doc.rust-lang.org/cargo/reference/pkgid-spec.html), so you can\ntarget individual versions of a package with syntax such as \u0060[profile.dev.package.\u0022foo:2.1.0\u0022]\u0060."
        },
        "panic": {
          "$ref": "#/types/cargo:index:panic"
        },
        "rpath": {
          "type": "boolean",
          "description": "The \u0060rpath\u0060 setting controls the [\u0060-C rpath\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#rpath) which controls\nwhether or not [\u0060rpath\u0060](https://en.wikipedia.org/wiki/Rpath) is enabled."
        }
      }
    },
    "cargo:index:profiles": {
      "type": "object",
      "description": "Profiles provide a way to alter the compiler settings, influencing things like optimizations and debugging symbols.\n\nCargo has 4 built-in profiles: dev, release, test, and bench. It automatically chooses the profile based on which command is being run, the package and target that is being built, and command-line flags like --release.",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/types/cargo:index:profile"
          }
        },
        "bench": {
          "$ref": "#/types/cargo:index:definitionsProfile"
        },
        "dev": {
          "$ref": "#/types/cargo:index:dev"
        },
        "release": {
          "$ref": "#/types/cargo:index:release"
        },
        "test": {
          "$ref": "#/types/cargo:index:test"
        }
      }
    },
    "cargo:index:propertiesPackage": {
      "type": "object",
      "description": "The \u0060workspace.package\u0060 table is where you define keys that can be\ninherited by members of a workspace. These keys can be inherited by\ndefining them in the member package with \u0060{key}.workspace = true\u0060.\n\nKeys that are supported:\n\n|                |                 |\n|----------------|-----------------|\n| \u0060authors\u0060      | \u0060categories\u0060    |\n| \u0060description\u0060  | \u0060documentation\u0060 |\n| \u0060edition\u0060      | \u0060exclude\u0060       |\n| \u0060homepage\u0060     | \u0060include\u0060       |\n| \u0060keywords\u0060     | \u0060license\u0060       |\n| \u0060license-file\u0060 | \u0060publish\u0060       |\n| \u0060readme\u0060       | \u0060repository\u0060    |\n| \u0060rust-version\u0060 | \u0060version\u0060       |\n\n- \u0060license-file\u0060 and \u0060readme\u0060 are relative to the workspace root\n- \u0060include\u0060 and \u0060exclude\u0060 are relative to your package root\n\nExample:\n\u0060\u0060\u0060toml\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\u0022bar\u0022]\n\n[workspace.package]\nversion = \u00221.2.3\u0022\nauthors = [\u0022Nice Folks\u0022]\ndescription = \u0022A short description of my package\u0022\ndocumentation = \u0022https://example.com/bar\u0022\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060toml\n# [PROJECT_DIR]/bar/Cargo.toml\n[package]\nname = \u0022bar\u0022\nversion.workspace = true\nauthors.workspace = true\ndescription.workspace = true\ndocumentation.workspace = true\n\u0060\u0060\u0060",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "authors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060authors\u0060 field lists people or organizations that are considered the\n\u0022authors\u0022 of the package. The exact meaning is open to interpretation \u2014 it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate\u0027s page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n\u003E **Note**: [crates.io](https://crates.io) requires at least one author to be listed."
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060categories\u0060 field is an array of strings of the categories this package\nbelongs to.\n\n\u0060\u0060\u0060toml\ncategories = [\u0022command-line-utilities\u0022, \u0022development-tools::cargo-plugins\u0022]\n\u0060\u0060\u0060\n\n\u003E **Note**: [crates.io](https://crates.io) has a maximum of 5 categories. Each category should\n\u003E match one of the strings available at https://crates.io/category_slugs, and\n\u003E must match exactly."
        },
        "description": {
          "type": "string",
          "description": "The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n\u0060\u0060\u0060toml\n[package]\n# ...\ndescription = \u0022A short description of my package\u0022\n\u0060\u0060\u0060\n\n\u003E **Note**: [crates.io](https://crates.io) requires the \u0060description\u0060 to be set."
        },
        "documentation": {
          "type": "string",
          "description": "\nThe \u0060documentation\u0060 field specifies a URL to a website hosting the crate\u0027s\ndocumentation. If no URL is specified in the manifest file, [crates.io](https://crates.io) will\nautomatically link your crate to the corresponding [docs.rs](https://docs.rs) page.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\ndocumentation = \u0022https://docs.rs/bitflags\u0022\n\u0060\u0060\u0060\n"
        },
        "edition": {
          "$ref": "#/types/cargo:index:packageEdition"
        },
        "exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n\u0060exclude\u0060 field identify a set of files that are not included, and the\npatterns in \u0060include\u0060 specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- \u0060foo\u0060 matches any file or directory with the name \u0060foo\u0060 anywhere in the\n  package. This is equivalent to the pattern \u0060**/foo\u0060.\n- \u0060/foo\u0060 matches any file or directory with the name \u0060foo\u0060 only in the root of\n  the package.\n- \u0060foo/\u0060 matches any *directory* with the name \u0060foo\u0060 anywhere in the package.\n- Common glob patterns like \u0060*\u0060, \u0060?\u0060, and \u0060[]\u0060 are supported:\n  - \u0060*\u0060 matches zero or more characters except \u0060/\u0060.  For example, \u0060*.html\u0060\n    matches any file or directory with the \u0060.html\u0060 extension anywhere in the\n    package.\n  - \u0060?\u0060 matches any character except \u0060/\u0060. For example, \u0060foo?\u0060 matches \u0060food\u0060,\n    but not \u0060foo\u0060.\n  - \u0060[]\u0060 allows for matching a range of characters. For example, \u0060[ab]\u0060\n    matches either \u0060a\u0060 or \u0060b\u0060. \u0060[a-z]\u0060 matches letters a through z.\n- \u0060**/\u0060 prefix matches in any directory. For example, \u0060**/foo/bar\u0060 matches the\n  file or directory \u0060bar\u0060 anywhere that is directly under directory \u0060foo\u0060.\n- \u0060/**\u0060 suffix matches everything inside. For example, \u0060foo/**\u0060 matches all\n  files inside directory \u0060foo\u0060, including all files in subdirectories below\n  \u0060foo\u0060.\n- \u0060/**/\u0060 matches zero or more directories. For example, \u0060a/**/b\u0060 matches\n  \u0060a/b\u0060, \u0060a/x/b\u0060, \u0060a/x/y/b\u0060, and so on.\n- \u0060!\u0060 prefix negates a pattern. For example, a pattern of \u0060src/**.rs\u0060 and\n  \u0060!foo.rs\u0060 would match all files with the \u0060.rs\u0060 extension inside the \u0060src\u0060\n  directory, except for any file named \u0060foo.rs\u0060.\n\nIf git is being used for a package, the \u0060exclude\u0060 field will be seeded with\nthe \u0060gitignore\u0060 settings from the repository.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nexclude = [\u0022build/**/*.o\u0022, \u0022doc/**/*.html\u0022]\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060toml\n[package]\n# ...\ninclude = [\u0022src/**/*\u0022, \u0022Cargo.toml\u0022]\n\u0060\u0060\u0060\n\nThe options are mutually exclusive: setting \u0060include\u0060 will override an\n\u0060exclude\u0060. Note that \u0060include\u0060 must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package\u0027s \u0060Cargo.toml\u0060 is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with \u0060rustdoc\u0060, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any \u0060rerun-if-*\u0060 directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."
        },
        "homepage": {
          "type": "string",
          "description": "The \u0060homepage\u0060 field should be a URL to a site that is the home page for your\npackage.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nhomepage = \u0022https://serde.rs/\u0022\n\u0060\u0060\u0060"
        },
        "include": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n\u0060exclude\u0060 field identify a set of files that are not included, and the\npatterns in \u0060include\u0060 specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- \u0060foo\u0060 matches any file or directory with the name \u0060foo\u0060 anywhere in the\n  package. This is equivalent to the pattern \u0060**/foo\u0060.\n- \u0060/foo\u0060 matches any file or directory with the name \u0060foo\u0060 only in the root of\n  the package.\n- \u0060foo/\u0060 matches any *directory* with the name \u0060foo\u0060 anywhere in the package.\n- Common glob patterns like \u0060*\u0060, \u0060?\u0060, and \u0060[]\u0060 are supported:\n  - \u0060*\u0060 matches zero or more characters except \u0060/\u0060.  For example, \u0060*.html\u0060\n    matches any file or directory with the \u0060.html\u0060 extension anywhere in the\n    package.\n  - \u0060?\u0060 matches any character except \u0060/\u0060. For example, \u0060foo?\u0060 matches \u0060food\u0060,\n    but not \u0060foo\u0060.\n  - \u0060[]\u0060 allows for matching a range of characters. For example, \u0060[ab]\u0060\n    matches either \u0060a\u0060 or \u0060b\u0060. \u0060[a-z]\u0060 matches letters a through z.\n- \u0060**/\u0060 prefix matches in any directory. For example, \u0060**/foo/bar\u0060 matches the\n  file or directory \u0060bar\u0060 anywhere that is directly under directory \u0060foo\u0060.\n- \u0060/**\u0060 suffix matches everything inside. For example, \u0060foo/**\u0060 matches all\n  files inside directory \u0060foo\u0060, including all files in subdirectories below\n  \u0060foo\u0060.\n- \u0060/**/\u0060 matches zero or more directories. For example, \u0060a/**/b\u0060 matches\n  \u0060a/b\u0060, \u0060a/x/b\u0060, \u0060a/x/y/b\u0060, and so on.\n- \u0060!\u0060 prefix negates a pattern. For example, a pattern of \u0060src/**.rs\u0060 and\n  \u0060!foo.rs\u0060 would match all files with the \u0060.rs\u0060 extension inside the \u0060src\u0060\n  directory, except for any file named \u0060foo.rs\u0060.\n\nIf git is being used for a package, the \u0060exclude\u0060 field will be seeded with\nthe \u0060gitignore\u0060 settings from the repository.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nexclude = [\u0022build/**/*.o\u0022, \u0022doc/**/*.html\u0022]\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060toml\n[package]\n# ...\ninclude = [\u0022src/**/*\u0022, \u0022Cargo.toml\u0022]\n\u0060\u0060\u0060\n\nThe options are mutually exclusive: setting \u0060include\u0060 will override an\n\u0060exclude\u0060. Note that \u0060include\u0060 must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package\u0027s \u0060Cargo.toml\u0060 is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with \u0060rustdoc\u0060, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any \u0060rerun-if-*\u0060 directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060keywords\u0060 field is an array of strings that describe this package. This\ncan help when searching for the package on a registry, and you may choose any\nwords that would help someone find this crate.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nkeywords = [\u0022gamedev\u0022, \u0022graphics\u0022]\n\u0060\u0060\u0060\n\n\u003E **Note**: [crates.io](https://crates.io) has a maximum of 5 keywords. Each keyword must be\n\u003E ASCII text, start with a letter, and only contain letters, numbers, \u0060_\u0060 or\n\u003E \u0060-\u0060, and have at most 20 characters."
        },
        "license": {
          "type": "string",
          "description": "The \u0060license\u0060 field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the \u0060license\u0060 field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nlicense = \u0022MIT OR Apache-2.0\u0022\n\u0060\u0060\u0060\n\nUsing \u0060OR\u0060 indicates the user may choose either license. Using \u0060AND\u0060 indicates\nthe user must comply with both licenses simultaneously. The \u0060WITH\u0060 operator\nindicates a license with a special exception. Some examples:\n\n* \u0060MIT OR Apache-2.0\u0060\n* \u0060LGPL-2.1 AND MIT AND BSD-2-Clause\u0060\n* \u0060GPL-2.0\u002B WITH Bison-exception-2.2\u0060\n\nIf a package is using a nonstandard license, then the \u0060license-file\u0060 field may\nbe specified in lieu of the \u0060license\u0060 field."
        },
        "licenseFile": {
          "type": "string",
          "description": "The \u0060license-file\u0060 field contains the path to a file\ncontaining the text of the license (relative to this \u0060Cargo.toml\u0060).\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nlicense-file = \u0022LICENSE.txt\u0022\n\u0060\u0060\u0060\n\n\u003E **Note**: [crates.io](https://crates.io) requires either \u0060license\u0060 or \u0060license-file\u0060 to be set."
        },
        "publish": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.AnyOfKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "readme": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.AnyOfKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "repository": {
          "type": "string",
          "description": "The \u0060repository\u0060 field should be a URL to the source repository for your\npackage.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nrepository = \u0022https://github.com/rust-lang/cargo/\u0022\n\u0060\u0060\u0060"
        },
        "rustVersion": {
          "type": "string",
          "description": "The \u0060rust-version\u0060 field is an optional key that tells cargo what version of the\nRust language and compiler your package can be compiled with. If the currently\nselected version of the Rust compiler is older than the stated version, cargo\nwill exit with an error, telling the user what version is required.\n\nThe first version of Cargo that supports this field was released with Rust 1.56.0.\nIn older releases, the field will be ignored, and Cargo will display a warning.\n\n\u0060\u0060\u0060toml\n[package]\n# ...\nrust-version = \u00221.56\u0022\n\u0060\u0060\u0060\n\nThe Rust version must be a bare version number with two or three components; it\ncannot include semver operators or pre-release identifiers. Compiler pre-release\nidentifiers such as -nightly will be ignored while checking the Rust version.\nThe \u0060rust-version\u0060 must be equal to or newer than the version that first\nintroduced the configured \u0060edition\u0060.\n\nThe \u0060rust-version\u0060 may be ignored using the \u0060--ignore-rust-version\u0060 option.\n\nSetting the \u0060rust-version\u0060 key in \u0060[package]\u0060 will affect all targets/crates in\nthe package, including test suites, benchmarks, binaries, examples, etc."
        },
        "version": {
          "type": "string",
          "description": "Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don\u0027t break the build.\n* After 1.0.0, don\u0027t add any new public API (no new \u0060pub\u0060 anything) in patch-level\n    versions. Always increment the minor version if you add any new \u0060pub\u0060 structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."
        }
      }
    },
    "cargo:index:release": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "buildOverride": {
          "$ref": "#/types/cargo:index:release"
        },
        "codegenUnits": {
          "type": "integer",
          "description": "The \u0060codegen-units\u0060 setting controls the [\u0060-C codegen-units\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units) which\ncontrols how many \u0022code generation units\u0022 a crate will be split into. More\ncode generation units allows more of a crate to be processed in parallel\npossibly reducing compile time, but may produce slower code.\n\nThis option takes an integer greater than 0.\n\nThe default is 256 for [incremental](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental) builds, and 16 for\nnon-incremental builds."
        },
        "debug": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "debugAssertions": {
          "type": "boolean",
          "description": "The \u0060debug-assertions\u0060 setting controls the [\u0060-C debug-assertions\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#debug-assertions) which\nturns \u0060cfg(debug_assertions)\u0060 [conditional compilation](https://doc.rust-lang.org/reference/conditional-compilation.html#debug_assertions) on or off. Debug\nassertions are intended to include runtime validation which is only available\nin debug/development builds. These may be things that are too expensive or\notherwise undesirable in a release build. Debug assertions enables the\n[\u0060debug_assert!\u0060 macro](https://doc.rust-lang.org/std/macro.debug_assert.html) in the standard library."
        },
        "dirName": {
          "type": "string"
        },
        "incremental": {
          "type": "boolean",
          "description": "The \u0060incremental\u0060 setting controls the [\u0060-C incremental\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#incremental) which controls\nwhether or not incremental compilation is enabled. Incremental compilation\ncauses \u0060rustc\u0060 to to save additional information to disk which will be reused\nwhen recompiling the crate, improving re-compile times. The additional\ninformation is stored in the \u0060target\u0060 directory.\n\nThe valid options are:\n\n* \u0060true\u0060: enabled\n* \u0060false\u0060: disabled\n\nIncremental compilation is only used for workspace members and \u0022path\u0022\ndependencies.\n\nThe incremental value can be overridden globally with the \u0060CARGO_INCREMENTAL\u0060\n[environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html) or the [\u0060build.incremental\u0060](https://doc.rust-lang.org/cargo/reference/config.html#buildincremental) config variable."
        },
        "inherits": {
          "type": "string"
        },
        "lto": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "optLevel": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "overflowChecks": {
          "type": "boolean",
          "description": "The \u0060overflow-checks\u0060 setting controls the [\u0060-C overflow-checks\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#overflow-checks) which\ncontrols the behavior of [runtime integer overflow](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow). When overflow-checks are\nenabled, a panic will occur on overflow."
        },
        "package": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/types/cargo:index:release"
          },
          "description": "Package-specific overrides.\n\nThe package name is a [Package ID Spec](https://doc.rust-lang.org/cargo/reference/pkgid-spec.html), so you can\ntarget individual versions of a package with syntax such as \u0060[profile.dev.package.\u0022foo:2.1.0\u0022]\u0060."
        },
        "panic": {
          "$ref": "#/types/cargo:index:releasePanic"
        },
        "rpath": {
          "type": "boolean",
          "description": "The \u0060rpath\u0060 setting controls the [\u0060-C rpath\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#rpath) which controls\nwhether or not [\u0060rpath\u0060](https://en.wikipedia.org/wiki/Rpath) is enabled."
        }
      }
    },
    "cargo:index:releasePanic": {
      "description": "The \u0060panic\u0060 setting controls the [\u0060-C panic\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#panic) which controls which panic\nstrategy to use.\n\nWhen set to \u0060\u0022unwind\u0022\u0060, the actual value depends on the default of the target\nplatform. For example, the NVPTX platform does not support unwinding, so it\nalways uses \u0060\u0022abort\u0022\u0060.\n\nTests, benchmarks, build scripts, and proc macros ignore the \u0060panic\u0060 setting.\nThe \u0060rustc\u0060 test harness currently requires \u0060unwind\u0060 behavior. See the\n[\u0060panic-abort-tests\u0060](https://doc.rust-lang.org/cargo/reference/unstable.html#panic-abort-tests) unstable flag which enables \u0060abort\u0060 behavior.\n\nAdditionally, when using the \u0060abort\u0060 strategy and building a test, all of the\ndependencies will also be forced to built with the \u0060unwind\u0060 strategy.",
      "type": "string",
      "enum": [
        {
          "value": "unwind"
        },
        {
          "value": "abort"
        }
      ]
    },
    "cargo:index:resolver": {
      "description": "A different feature resolver algorithm can be used by specifying the resolver version in Cargo.toml like this:\n\n[package]\nname = \u0022my-package\u0022\nversion = \u00221.0.0\u0022\nresolver = \u00222\u0022\n\nThe version \u00221\u0022 resolver is the original resolver that shipped with Cargo up to version 1.50. The default is \u00222\u0022 if the root package specifies edition = \u00222021\u0022 or a newer edition. Otherwise the default is \u00221\u0022.\n\nThe version \u00222\u0022 resolver introduces changes in feature unification. See the features chapter for more details.\n\nThe resolver is a global option that affects the entire workspace. The resolver version in dependencies is ignored, only the value in the top-level package will be used. If using a virtual workspace, the version should be specified in the [workspace] table, for example:\n\n[workspace]\nmembers = [\u0022member1\u0022, \u0022member2\u0022]\nresolver = \u00222\u0022",
      "type": "string",
      "enum": [
        {
          "value": "1"
        },
        {
          "value": "2"
        },
        {
          "value": "3"
        }
      ]
    },
    "cargo:index:root": {
      "type": "object",
      "description": "A schema for Cargo.toml.",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "badges": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": "[crates.io](https://crates.io) can display various badges for build status, test coverage, etc. for\neach crate. All badges are optional.\n\n- The badges pertaining to build status that are currently available are\n  Appveyor, CircleCI, Cirrus CI, GitLab, Azure DevOps, Travis CI and Bitbucket\n  Pipelines.\n- Available badges pertaining to code test coverage are Codecov and Coveralls.\n- There are also maintenance-related badges based on isitmaintained.com\n  which state the issue resolution time, percent of open issues, and future\n  maintenance intentions.\n\nMost badge specifications require a \u0060repository\u0060 key. It is expected to be in\n\u0060user/repo\u0060 format.\n\n\u0060\u0060\u0060toml\n[badges]\n\n# Appveyor: \u0060repository\u0060 is required. \u0060branch\u0060 is optional; default is \u0060master\u0060\n# \u0060service\u0060 is optional; valid values are \u0060github\u0060 (default), \u0060bitbucket\u0060, and\n# \u0060gitlab\u0060; \u0060id\u0060 is optional; you can specify the appveyor project id if you\n# want to use that instead. \u0060project_name\u0060 is optional; use when the repository\n# name differs from the appveyor project name.\nappveyor = { repository = \u0022...\u0022, branch = \u0022master\u0022, service = \u0022github\u0022 }\n\n# Circle CI: \u0060repository\u0060 is required. \u0060branch\u0060 is optional; default is \u0060master\u0060\ncircle-ci = { repository = \u0022...\u0022, branch = \u0022master\u0022 }\n\n# Cirrus CI: \u0060repository\u0060 is required. \u0060branch\u0060 is optional; default is \u0060master\u0060\ncirrus-ci = { repository = \u0022...\u0022, branch = \u0022master\u0022 }\n\n# GitLab: \u0060repository\u0060 is required. \u0060branch\u0060 is optional; default is \u0060master\u0060\ngitlab = { repository = \u0022...\u0022, branch = \u0022master\u0022 }\n\n# Azure DevOps: \u0060project\u0060 is required. \u0060pipeline\u0060 is required. \u0060build\u0060 is optional; default is \u00601\u0060\n# Note: project = \u0060organization/project\u0060, pipeline = \u0060name_of_pipeline\u0060, build = \u0060definitionId\u0060\nazure-devops = { project = \u0022...\u0022, pipeline = \u0022...\u0022, build=\u00222\u0022 }\n\n# Travis CI: \u0060repository\u0060 in format \u0022\u003Cuser\u003E/\u003Cproject\u003E\u0022 is required.\n# \u0060branch\u0060 is optional; default is \u0060master\u0060\ntravis-ci = { repository = \u0022...\u0022, branch = \u0022master\u0022 }\n\n# Bitbucket Pipelines: \u0060repository\u0060 is required. \u0060branch\u0060 is required\nbitbucket-pipelines = { repository = \u0022...\u0022, branch = \u0022master\u0022 }\n\n# Codecov: \u0060repository\u0060 is required. \u0060branch\u0060 is optional; default is \u0060master\u0060\n# \u0060service\u0060 is optional; valid values are \u0060github\u0060 (default), \u0060bitbucket\u0060, and\n# \u0060gitlab\u0060.\ncodecov = { repository = \u0022...\u0022, branch = \u0022master\u0022, service = \u0022github\u0022 }\n\n# Coveralls: \u0060repository\u0060 is required. \u0060branch\u0060 is optional; default is \u0060master\u0060\n# \u0060service\u0060 is optional; valid values are \u0060github\u0060 (default) and \u0060bitbucket\u0060.\ncoveralls = { repository = \u0022...\u0022, branch = \u0022master\u0022, service = \u0022github\u0022 }\n\n# Is it maintained resolution time: \u0060repository\u0060 is required.\nis-it-maintained-issue-resolution = { repository = \u0022...\u0022 }\n\n# Is it maintained percentage of open issues: \u0060repository\u0060 is required.\nis-it-maintained-open-issues = { repository = \u0022...\u0022 }\n\n# Maintenance: \u0060status\u0060 is required. Available options are:\n# - \u0060actively-developed\u0060: New features are being added and bugs are being fixed.\n# - \u0060passively-maintained\u0060: There are no plans for new features, but the maintainer intends to\n#   respond to issues that get filed.\n# - \u0060as-is\u0060: The crate is feature complete, the maintainer does not intend to continue working on\n#   it or providing support, but it works for the purposes it was designed for.\n# - \u0060experimental\u0060: The author wants to share it with the community but is not intending to meet\n#   anyone\u0027s particular use case.\n# - \u0060looking-for-maintainer\u0060: The current maintainer would like to transfer the crate to someone\n#   else.\n# - \u0060deprecated\u0060: The maintainer does not recommend using this crate (the description of the crate\n#   can describe why, there could be a better solution available or there could be problems with\n#   the crate that the author does not want to fix).\n# - \u0060none\u0060: Displays no badge on crates.io, since the maintainer has not chosen to specify\n#   their intentions, potential crate users will need to investigate on their own.\nmaintenance = { status = \u0022...\u0022 }\n\u0060\u0060\u0060"
        },
        "bench": {
          "type": "array",
          "items": {
            "$ref": "#/types/cargo:index:target"
          },
          "description": "Benchmarks provide a way to test the performance of your code using the\n[\u0060cargo bench\u0060](https://doc.rust-lang.org/cargo/commands/cargo-bench.html) command. They follow the same structure as [tests](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#tests),\nwith each benchmark function annotated with the \u0060#[bench]\u0060 attribute.\nSimilarly to tests:\n\n* Benchmarks are placed in the [\u0060benches\u0060 directory](https://doc.rust-lang.org/cargo/guide/project-layout.html).\n* Benchmark functions defined in libraries and binaries have access to the\n  *private* API within the target they are defined in. Benchmarks in the\n  \u0060benches\u0060 directory may use the *public* API.\n* [The \u0060bench\u0060 field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-bench-field) can be used to define which targets\n  are benchmarked by default.\n* [The \u0060harness\u0060 field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field) can be used to disable the\n  built-in harness.\n\n\u003E **Note**: The [\u0060#[bench]\u0060\n\u003E attribute](https://doc.rust-lang.org/unstable-book/library-features/test.html) is currently\n\u003E unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some\n\u003E packages available on [crates.io](https://crates.io/keywords/benchmark) that\n\u003E may help with running benchmarks on the stable channel, such as\n\u003E [Criterion](https://crates.io/crates/criterion)."
        },
        "bin": {
          "type": "array",
          "items": {
            "$ref": "#/types/cargo:index:definitionsTarget"
          },
          "description": "Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is \u0060src/main.rs\u0060, which defaults to the name of\nthe package. Additional binaries are stored in the [\u0060src/bin/\u0060\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the \u0060[[bin]]\u0060 tables in \u0060Cargo.toml\u0060.\n\nBinaries can use the public API of the package\u0027s library. They are also linked\nwith the [\u0060[dependencies]\u0060](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in \u0060Cargo.toml\u0060.\n\nYou can run individual binaries with the [\u0060cargo run\u0060](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the \u0060--bin\n\u003Cbin-name\u003E\u0060 option. [\u0060cargo install\u0060](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n\u0060\u0060\u0060toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \u0022cool-tool\u0022\ntest = false\nbench = false\n\n[[bin]]\nname = \u0022frobnicator\u0022\nrequired-features = [\u0022frobnicate\u0022]\n\u0060\u0060\u0060"
        },
        "buildDependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          },
          "description": "You can depend on other Cargo-based crates for use in your build scripts.\nDependencies are declared through the \u0060build-dependencies\u0060 section of the\nmanifest:\n\n\u0060\u0060\u0060toml\n[build-dependencies]\ncc = \u00221.0.3\u0022\n\u0060\u0060\u0060\n\nThe build script **does not** have access to the dependencies listed\nin the \u0060dependencies\u0060 or \u0060dev-dependencies\u0060 section. Build\ndependencies will likewise not be available to the package itself\nunless listed under the \u0060dependencies\u0060 section as well. A package\nitself and its build script are built separately, so their\ndependencies need not coincide. Cargo is kept simpler and cleaner by\nusing independent dependencies for independent purposes."
        },
        "buildDependencies0": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "cargoFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          },
          "description": "Cargo is configured to look for dependencies on [crates.io](https://crates.io) by default. Only\nthe name and a version string are required in this case. In [the cargo\nguide](https://doc.rust-lang.org/cargo/guide/index.html), we specified a dependency on the \u0060time\u0060 crate:\n\n\u0060\u0060\u0060toml\n[dependencies]\ntime = \u00220.1.12\u0022\n\u0060\u0060\u0060\n\nThe string \u0060\u00220.1.12\u0022\u0060 is a [semver](https://github.com/steveklabnik/semver#requirements) version requirement. Since this\nstring does not have any operators in it, it is interpreted the same way as\nif we had specified \u0060\u0022^0.1.12\u0022\u0060, which is called a caret requirement.\n\nA dependency can also be defined by a table with additional options:\n\n\u0060\u0060\u0060toml\n[dependencies]\ntime = { path = \u0022../time\u0022, version = \u00220.1.12\u0022 }\n\u0060\u0060\u0060"
        },
        "devDependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          },
          "description": "The format of \u0060[dev-dependencies]\u0060 is equivalent to \u0060[dependencies]\u0060:\n\n\u0060\u0060\u0060toml\n[dev-dependencies]\ntempdir = \u00220.3\u0022\n\u0060\u0060\u0060\n\nDev-dependencies are not used when compiling\na package for building, but are used for compiling tests, examples, and\nbenchmarks.\n\nThese dependencies are *not* propagated to other packages which depend on this\npackage.\n\nYou can also have target-specific development dependencies by using\n\u0060dev-dependencies\u0060 in the target section header instead of \u0060dependencies\u0060. For\nexample:\n\n\u0060\u0060\u0060toml\n[target.\u0027cfg(unix)\u0027.dev-dependencies]\nmio = \u00220.0.1\u0022\n\u0060\u0060\u0060\n\n\u003E **Note**: When a package is published, only dev-dependencies that specify a\n\u003E \u0060version\u0060 will be included in the published crate. For most use cases,\n\u003E dev-dependencies are not needed when published, though some users (like OS\n\u003E packagers) may want to run tests within a crate, so providing a \u0060version\u0060 if\n\u003E possible can still be beneficial.\n"
        },
        "devDependencies0": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "example": {
          "type": "array",
          "items": {
            "$ref": "#/types/cargo:index:items"
          },
          "description": "Files located under the [examples directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the[ target/debug/examples directory](https://doc.rust-lang.org/cargo/guide/build-cache.html).\n\nExamples can use the public API of the package\u0027s library. They are also linked with the [dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in Cargo.toml.\n\nBy default, examples are executable binaries (with a \u0060main()\u0060 function). You\ncan specify the [\u0060crate-type\u0060 field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-crate-type-field) to make an example\nbe compiled as a library:\n\n\u0060\u0060\u0060toml\n[[example]]\nname = \u0022foo\u0022\ncrate-type = [\u0022staticlib\u0022]\n\u0060\u0060\u0060\n\nYou can run individual executable examples with the [\u0060cargo run\u0060](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with\nthe \u0060--example \u003Cexample-name\u003E\u0060 option. Library examples can be built with\n[\u0060cargo build\u0060](https://doc.rust-lang.org/cargo/commands/cargo-build.html) with the \u0060--example \u003Cexample-name\u003E\u0060 option. [\u0060cargo install\u0060](https://doc.rust-lang.org/cargo/commands/cargo-install.html)\nwith the \u0060--example \u003Cexample-name\u003E\u0060 option can be used to copy executable\nbinaries to a common location. Examples are compiled by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by\ndefault to protect them from bit-rotting. Set [the \u0060test\u0060\nfield](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-test-field) to \u0060true\u0060 if you have \u0060#[test]\u0060 functions in the\nexample that you want to run with [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html).\n"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": "Cargo supports features to allow expression of:\n\n* conditional compilation options (usable through \u0060cfg\u0060 attributes);\n* optional dependencies, which enhance a package, but are not required; and\n* clusters of optional dependencies, such as \u0060postgres-all\u0060, that would include the\n  \u0060postgres\u0060 package, the \u0060postgres-macros\u0060 package, and possibly other packages\n  (such as development-time mocking libraries, debugging tools, etc.).\n\nA feature of a package is either an optional dependency, or a set of other\nfeatures.\n"
        },
        "lib": {
          "$ref": "#/types/cargo:index:lib"
        },
        "package": {
          "$ref": "#/types/cargo:index:package"
        },
        "patch": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "pulumi.json#/Any"
            }
          },
          "description": "The \u0060[patch]\u0060 section of \u0060Cargo.toml\u0060 can be used to override dependencies\nwith other copies. The syntax is similar to the\n[\u0060[dependencies]\u0060](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) section.\n\n"
        },
        "profile": {
          "$ref": "#/types/cargo:index:profiles"
        },
        "project": {
          "$ref": "pulumi.json#/Any",
          "description": "Ref needs more translation map [(Json.Schema.UnrecognizedKeyword, [Json.Schema.UnrecognizedKeyword; Json.Schema.UnrecognizedKeyword])]"
        },
        "replace": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "target": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/types/cargo:index:platform"
          }
        },
        "test": {
          "type": "array",
          "items": {
            "$ref": "#/types/cargo:index:testItems"
          },
          "description": "Files located under the [\u0060tests\u0060 directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are integration\ntests. When you run [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html), Cargo will compile each of these files as\na separate crate, and execute them.\n\nIntegration tests can use the public API of the package\u0027s library. They are\nalso linked with the [\u0060[dependencies]\u0060](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and\n[\u0060[dev-dependencies]\u0060](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in \u0060Cargo.toml\u0060.\n\nIf you want to share code among multiple integration tests, you can place it\nin a separate module such as \u0060tests/common/mod.rs\u0060 and then put \u0060mod common;\u0060\nin each test to import it.\n\nEach integration test results in a separate executable binary, and [\u0060cargo\ntest\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the \u0060#[test]\u0060\nannotated functions and run them in parallel. You can pass module names to\n[\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The \u0060CARGO_BIN_EXE_\u003Cname\u003E\u0060 [environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the\nintegration test is built so that it can use the [\u0060env\u0060 macro](https://doc.rust-lang.org/std/macro.env.html) to locate the\nexecutable."
        },
        "workspace": {
          "$ref": "#/types/cargo:index:workspace"
        }
      }
    },
    "cargo:index:support": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        }
      }
    },
    "cargo:index:target": {
      "type": "object",
      "description": "Benchmarks provide a way to test the performance of your code using the\n[\u0060cargo bench\u0060](https://doc.rust-lang.org/cargo/commands/cargo-bench.html) command. They follow the same structure as [tests](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#tests),\nwith each benchmark function annotated with the \u0060#[bench]\u0060 attribute.\nSimilarly to tests:\n\n* Benchmarks are placed in the [\u0060benches\u0060 directory](https://doc.rust-lang.org/cargo/guide/project-layout.html).\n* Benchmark functions defined in libraries and binaries have access to the\n  *private* API within the target they are defined in. Benchmarks in the\n  \u0060benches\u0060 directory may use the *public* API.\n* [The \u0060bench\u0060 field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-bench-field) can be used to define which targets\n  are benchmarked by default.\n* [The \u0060harness\u0060 field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field) can be used to disable the\n  built-in harness.\n\n\u003E **Note**: The [\u0060#[bench]\u0060\n\u003E attribute](https://doc.rust-lang.org/unstable-book/library-features/test.html) is currently\n\u003E unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some\n\u003E packages available on [crates.io](https://crates.io/keywords/benchmark) that\n\u003E may help with running benchmarks on the stable channel, such as\n\u003E [Criterion](https://crates.io/crates/criterion).",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "bench": {
          "type": "boolean",
          "description": "The \u0060bench\u0060 field indicates whether or not the target is benchmarked by\ndefault by [\u0060cargo bench\u0060](https://doc.rust-lang.org/cargo/commands/cargo-bench.html). The default is \u0060true\u0060 for lib, bins, and\nbenchmarks."
        },
        "crateType": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060crate-type\u0060 field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \u0022bin\u0022 crate type.\n\nThe available options are \u0060bin\u0060, \u0060lib\u0060, \u0060rlib\u0060, \u0060dylib\u0060, \u0060cdylib\u0060,\n\u0060staticlib\u0060, and \u0060proc-macro\u0060. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."
        },
        "crateType0": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "doc": {
          "type": "boolean",
          "description": "The \u0060doc\u0060 field indicates whether or not the target is included in the\ndocumentation generated by [\u0060cargo doc\u0060](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) by default. The default is \u0060true\u0060 for\nlibraries and binaries.\n\n\u003E **Note**: The binary will be skipped if its name is the same as the lib\n\u003E target."
        },
        "doctest": {
          "type": "boolean",
          "description": "The \u0060doctest\u0060 field indicates whether or not [documentation examples](https://doc.rust-lang.org/rustdoc/documentation-tests.html) are\ntested by default by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). This is only relevant for libraries, it\nhas no effect on other sections. The default is \u0060true\u0060 for the library.\n"
        },
        "edition": {
          "$ref": "#/types/cargo:index:edition"
        },
        "harness": {
          "type": "boolean",
          "description": "The \u0060harness\u0060 field indicates that the [\u0060--test\u0060 flag](https://doc.rust-lang.org/rustc/command-line-arguments.html#option-test) will be passed to\n\u0060rustc\u0060 which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the [\u0060#[test]\u0060 attribute](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) or benchmarks with the \u0060#[bench]\u0060 attribute. The\ndefault is \u0060true\u0060 for all targets.\n\nIf set to \u0060false\u0060, then you are responsible for defining a \u0060main()\u0060 function\nto run tests and benchmarks.\n\nTests have the [\u0060cfg(test)\u0060 conditional expression](https://doc.rust-lang.org/reference/conditional-compilation.html#test) enabled whether\nor not the harness is enabled."
        },
        "name": {
          "type": "string",
          "description": "The \u0060name\u0060 field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the \u0060[lib]\u0060 and the default binary (\u0060src/main.rs\u0060), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except \u0060[lib]\u0060."
        },
        "path": {
          "type": "string",
          "description": "The \u0060path\u0060 field specifies where the source for the crate is located, relative\nto the \u0060Cargo.toml\u0060 file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."
        },
        "plugin": {
          "type": "boolean"
        },
        "procMacro": {
          "type": "boolean",
          "description": "The \u0060proc-macro\u0060 field indicates that the library is a [procedural macro](https://doc.rust-lang.org/book/ch19-06-macros.html)\n([reference](https://doc.rust-lang.org/reference/procedural-macros.html)). This is only valid for the \u0060[lib]\u0060\ntarget."
        },
        "procMacro0": {
          "type": "boolean"
        },
        "requiredFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060required-features\u0060 field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the \u0060[[bin]]\u0060, \u0060[[bench]]\u0060,\n\u0060[[test]]\u0060, and \u0060[[example]]\u0060 sections, it has no effect on \u0060[lib]\u0060.\n\n\u0060\u0060\u0060toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \u0022my-pg-tool\u0022\nrequired-features = [\u0022postgres\u0022, \u0022tools\u0022]\n\u0060\u0060\u0060\n"
        },
        "test": {
          "type": "boolean",
          "description": "The \u0060test\u0060 field indicates whether or not the target is tested by default by\n[\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). The default is \u0060true\u0060 for lib, bins, and tests.\n\n\u003E **Note**: Examples are built by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by default to ensure they\n\u003E continue to compile, but they are not *tested* by default. Setting \u0060test =\n\u003E true\u0060 for an example will also build it as a test and run any\n\u003E [\u0060#[test]\u0060](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) functions defined in the example."
        }
      }
    },
    "cargo:index:test": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "buildOverride": {
          "$ref": "#/types/cargo:index:test"
        },
        "codegenUnits": {
          "type": "integer",
          "description": "The \u0060codegen-units\u0060 setting controls the [\u0060-C codegen-units\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units) which\ncontrols how many \u0022code generation units\u0022 a crate will be split into. More\ncode generation units allows more of a crate to be processed in parallel\npossibly reducing compile time, but may produce slower code.\n\nThis option takes an integer greater than 0.\n\nThe default is 256 for [incremental](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental) builds, and 16 for\nnon-incremental builds."
        },
        "debug": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "debugAssertions": {
          "type": "boolean",
          "description": "The \u0060debug-assertions\u0060 setting controls the [\u0060-C debug-assertions\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#debug-assertions) which\nturns \u0060cfg(debug_assertions)\u0060 [conditional compilation](https://doc.rust-lang.org/reference/conditional-compilation.html#debug_assertions) on or off. Debug\nassertions are intended to include runtime validation which is only available\nin debug/development builds. These may be things that are too expensive or\notherwise undesirable in a release build. Debug assertions enables the\n[\u0060debug_assert!\u0060 macro](https://doc.rust-lang.org/std/macro.debug_assert.html) in the standard library."
        },
        "dirName": {
          "type": "string"
        },
        "incremental": {
          "type": "boolean",
          "description": "The \u0060incremental\u0060 setting controls the [\u0060-C incremental\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#incremental) which controls\nwhether or not incremental compilation is enabled. Incremental compilation\ncauses \u0060rustc\u0060 to to save additional information to disk which will be reused\nwhen recompiling the crate, improving re-compile times. The additional\ninformation is stored in the \u0060target\u0060 directory.\n\nThe valid options are:\n\n* \u0060true\u0060: enabled\n* \u0060false\u0060: disabled\n\nIncremental compilation is only used for workspace members and \u0022path\u0022\ndependencies.\n\nThe incremental value can be overridden globally with the \u0060CARGO_INCREMENTAL\u0060\n[environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html) or the [\u0060build.incremental\u0060](https://doc.rust-lang.org/cargo/reference/config.html#buildincremental) config variable."
        },
        "inherits": {
          "type": "string"
        },
        "lto": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "optLevel": {
          "$ref": "pulumi.json#/Any",
          "description": "unhandled schema: Json.Schema.TitleKeyword, Json.Schema.DescriptionKeyword, Json.Schema.EnumKeyword, Json.Schema.UnrecognizedKeyword"
        },
        "overflowChecks": {
          "type": "boolean",
          "description": "The \u0060overflow-checks\u0060 setting controls the [\u0060-C overflow-checks\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#overflow-checks) which\ncontrols the behavior of [runtime integer overflow](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow). When overflow-checks are\nenabled, a panic will occur on overflow."
        },
        "package": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/types/cargo:index:test"
          },
          "description": "Package-specific overrides.\n\nThe package name is a [Package ID Spec](https://doc.rust-lang.org/cargo/reference/pkgid-spec.html), so you can\ntarget individual versions of a package with syntax such as \u0060[profile.dev.package.\u0022foo:2.1.0\u0022]\u0060."
        },
        "panic": {
          "$ref": "#/types/cargo:index:testPanic"
        },
        "rpath": {
          "type": "boolean",
          "description": "The \u0060rpath\u0060 setting controls the [\u0060-C rpath\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#rpath) which controls\nwhether or not [\u0060rpath\u0060](https://en.wikipedia.org/wiki/Rpath) is enabled."
        }
      }
    },
    "cargo:index:testItems": {
      "type": "object",
      "description": "Files located under the [\u0060tests\u0060 directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are integration\ntests. When you run [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html), Cargo will compile each of these files as\na separate crate, and execute them.\n\nIntegration tests can use the public API of the package\u0027s library. They are\nalso linked with the [\u0060[dependencies]\u0060](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and\n[\u0060[dev-dependencies]\u0060](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in \u0060Cargo.toml\u0060.\n\nIf you want to share code among multiple integration tests, you can place it\nin a separate module such as \u0060tests/common/mod.rs\u0060 and then put \u0060mod common;\u0060\nin each test to import it.\n\nEach integration test results in a separate executable binary, and [\u0060cargo\ntest\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the \u0060#[test]\u0060\nannotated functions and run them in parallel. You can pass module names to\n[\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The \u0060CARGO_BIN_EXE_\u003Cname\u003E\u0060 [environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the\nintegration test is built so that it can use the [\u0060env\u0060 macro](https://doc.rust-lang.org/std/macro.env.html) to locate the\nexecutable.",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "bench": {
          "type": "boolean",
          "description": "The \u0060bench\u0060 field indicates whether or not the target is benchmarked by\ndefault by [\u0060cargo bench\u0060](https://doc.rust-lang.org/cargo/commands/cargo-bench.html). The default is \u0060true\u0060 for lib, bins, and\nbenchmarks."
        },
        "crateType": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060crate-type\u0060 field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \u0022bin\u0022 crate type.\n\nThe available options are \u0060bin\u0060, \u0060lib\u0060, \u0060rlib\u0060, \u0060dylib\u0060, \u0060cdylib\u0060,\n\u0060staticlib\u0060, and \u0060proc-macro\u0060. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."
        },
        "crateType0": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "doc": {
          "type": "boolean",
          "description": "The \u0060doc\u0060 field indicates whether or not the target is included in the\ndocumentation generated by [\u0060cargo doc\u0060](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) by default. The default is \u0060true\u0060 for\nlibraries and binaries.\n\n\u003E **Note**: The binary will be skipped if its name is the same as the lib\n\u003E target."
        },
        "doctest": {
          "type": "boolean",
          "description": "The \u0060doctest\u0060 field indicates whether or not [documentation examples](https://doc.rust-lang.org/rustdoc/documentation-tests.html) are\ntested by default by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). This is only relevant for libraries, it\nhas no effect on other sections. The default is \u0060true\u0060 for the library.\n"
        },
        "edition": {
          "$ref": "#/types/cargo:index:testItemsEdition"
        },
        "harness": {
          "type": "boolean",
          "description": "The \u0060harness\u0060 field indicates that the [\u0060--test\u0060 flag](https://doc.rust-lang.org/rustc/command-line-arguments.html#option-test) will be passed to\n\u0060rustc\u0060 which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the [\u0060#[test]\u0060 attribute](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) or benchmarks with the \u0060#[bench]\u0060 attribute. The\ndefault is \u0060true\u0060 for all targets.\n\nIf set to \u0060false\u0060, then you are responsible for defining a \u0060main()\u0060 function\nto run tests and benchmarks.\n\nTests have the [\u0060cfg(test)\u0060 conditional expression](https://doc.rust-lang.org/reference/conditional-compilation.html#test) enabled whether\nor not the harness is enabled."
        },
        "name": {
          "type": "string",
          "description": "The \u0060name\u0060 field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the \u0060[lib]\u0060 and the default binary (\u0060src/main.rs\u0060), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except \u0060[lib]\u0060."
        },
        "path": {
          "type": "string",
          "description": "The \u0060path\u0060 field specifies where the source for the crate is located, relative\nto the \u0060Cargo.toml\u0060 file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."
        },
        "plugin": {
          "type": "boolean"
        },
        "procMacro": {
          "type": "boolean",
          "description": "The \u0060proc-macro\u0060 field indicates that the library is a [procedural macro](https://doc.rust-lang.org/book/ch19-06-macros.html)\n([reference](https://doc.rust-lang.org/reference/procedural-macros.html)). This is only valid for the \u0060[lib]\u0060\ntarget."
        },
        "procMacro0": {
          "type": "boolean"
        },
        "requiredFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060required-features\u0060 field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the \u0060[[bin]]\u0060, \u0060[[bench]]\u0060,\n\u0060[[test]]\u0060, and \u0060[[example]]\u0060 sections, it has no effect on \u0060[lib]\u0060.\n\n\u0060\u0060\u0060toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \u0022my-pg-tool\u0022\nrequired-features = [\u0022postgres\u0022, \u0022tools\u0022]\n\u0060\u0060\u0060\n"
        },
        "test": {
          "type": "boolean",
          "description": "The \u0060test\u0060 field indicates whether or not the target is tested by default by\n[\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html). The default is \u0060true\u0060 for lib, bins, and tests.\n\n\u003E **Note**: Examples are built by [\u0060cargo test\u0060](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by default to ensure they\n\u003E continue to compile, but they are not *tested* by default. Setting \u0060test =\n\u003E true\u0060 for an example will also build it as a test and run any\n\u003E [\u0060#[test]\u0060](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) functions defined in the example."
        }
      }
    },
    "cargo:index:testItemsEdition": {
      "description": "The \u0060edition\u0060 key affects which edition your package is compiled with. Cargo\nwill always generate packages via [\u0060cargo new\u0060](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the \u0060edition\u0060 key set to the\nlatest edition. Setting the \u0060edition\u0060 key in \u0060[package]\u0060 will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc.",
      "type": "string",
      "enum": [
        {
          "value": "2015"
        },
        {
          "value": "2018"
        },
        {
          "value": "2021"
        },
        {
          "value": "2024"
        }
      ]
    },
    "cargo:index:testPanic": {
      "description": "The \u0060panic\u0060 setting controls the [\u0060-C panic\u0060 flag](https://doc.rust-lang.org/rustc/codegen-options/index.html#panic) which controls which panic\nstrategy to use.\n\nWhen set to \u0060\u0022unwind\u0022\u0060, the actual value depends on the default of the target\nplatform. For example, the NVPTX platform does not support unwinding, so it\nalways uses \u0060\u0022abort\u0022\u0060.\n\nTests, benchmarks, build scripts, and proc macros ignore the \u0060panic\u0060 setting.\nThe \u0060rustc\u0060 test harness currently requires \u0060unwind\u0060 behavior. See the\n[\u0060panic-abort-tests\u0060](https://doc.rust-lang.org/cargo/reference/unstable.html#panic-abort-tests) unstable flag which enables \u0060abort\u0060 behavior.\n\nAdditionally, when using the \u0060abort\u0060 strategy and building a test, all of the\ndependencies will also be forced to built with the \u0060unwind\u0060 strategy.",
      "type": "string",
      "enum": [
        {
          "value": "unwind"
        },
        {
          "value": "abort"
        }
      ]
    },
    "cargo:index:workspace": {
      "type": "object",
      "description": "The \u0060[workspace]\u0060 table in \u0060Cargo.toml\u0060 defines which packages are members of\nthe workspace:\n\n\u0060\u0060\u0060toml\n[workspace]\nmembers = [\u0022member1\u0022, \u0022path/to/member2\u0022, \u0022crates/*\u0022]\nexclude = [\u0022crates/foo\u0022, \u0022path/to/other\u0022]\n\u0060\u0060\u0060\n\nAn empty \u0060[workspace]\u0060 table can be used with a \u0060[package]\u0060 to conveniently\ncreate a workspace with the package and all of its path dependencies.\n\nAll [\u0060path\u0060 dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-path-dependencies) residing in the workspace directory automatically\nbecome members. Additional members can be listed with the \u0060members\u0060 key, which\nshould be an array of strings containing directories with \u0060Cargo.toml\u0060 files.\n\nThe \u0060members\u0060 list also supports [globs](https://docs.rs/glob/0.3.0/glob/struct.Pattern.html) to match multiple paths, using\ntypical filename glob patterns like \u0060*\u0060 and \u0060?\u0060.\n\nThe \u0060exclude\u0060 key can be used to prevent paths from being included in a\nworkspace. This can be useful if some path dependencies aren\u0027t desired to be\nin the workspace at all, or using a glob pattern and you want to remove a\ndirectory.\n\nAn empty \u0060[workspace]\u0060 table can be used with a \u0060[package]\u0060 to conveniently\ncreate a workspace with the package and all of its path dependencies.",
      "properties": {
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "defaultMembers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The optional \u0060default-members\u0060 key can be specified to set the members to\noperate on when in the workspace root and the package selection flags are not\nused:\n\n\u0060\u0060\u0060toml\n[workspace]\nmembers = [\u0022path/to/member1\u0022, \u0022path/to/member2\u0022, \u0022path/to/member3/*\u0022]\ndefault-members = [\u0022path/to/member2\u0022, \u0022path/to/member3/foo\u0022]\n\u0060\u0060\u0060\n\nWhen specified, \u0060default-members\u0060 must expand to a subset of \u0060members\u0060."
        },
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          },
          "description": "The \u0060workspace.dependencies\u0060 table is where you define dependencies to be\ninherited by members of a workspace.\n\nSpecifying a workspace dependency is similar to [package dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) except:\n- Dependencies from this table cannot be declared as \u0060optional\u0060\n- [\u0060features\u0060][features] declared in this table are additive with the \u0060features\u0060 from \u0060[dependencies]\u0060\n\nYou can then [inherit the workspace dependency as a package dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace)\n\nExample:\n\u0060\u0060\u0060toml\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\u0022bar\u0022]\n\n[workspace.dependencies]\ncc = \u00221.0.73\u0022\nrand = \u00220.8.5\u0022\nregex = { version = \u00221.6.0\u0022, default-features = false, features = [\u0022std\u0022] }\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060toml\n# [PROJECT_DIR]/bar/Cargo.toml\n[package]\nname = \u0022bar\u0022\nversion = \u00220.2.0\u0022\n\n[dependencies]\nregex = { workspace = true, features = [\u0022unicode\u0022] }\n\n[build-dependencies]\ncc.workspace = true\n\n[dev-dependencies]\nrand.workspace = true\n\u0060\u0060\u0060"
        },
        "exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The \u0060exclude\u0060 key can be used to prevent paths from being included in a\nworkspace. This can be useful if some path dependencies aren\u0027t desired to be\nin the workspace at all, or using a glob pattern and you want to remove a\ndirectory."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All [\u0060path\u0060 dependencies] residing in the workspace directory automatically\nbecome members. Additional members can be listed with the \u0060members\u0060 key, which\nshould be an array of strings containing directories with \u0060Cargo.toml\u0060 files.\n\nThe \u0060members\u0060 list also supports [globs] to match multiple paths, using\ntypical filename glob patterns like \u0060*\u0060 and \u0060?\u0060."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "$ref": "pulumi.json#/Any"
          },
          "description": "The \u0060workspace.metadata\u0060 table is ignored by Cargo and will not be warned\nabout. This section can be used for tools that would like to store workspace\nconfiguration in \u0060Cargo.toml\u0060. For example:\n\n\u0060\u0060\u0060toml\n[workspace]\nmembers = [\u0022member1\u0022, \u0022member2\u0022]\n\n[workspace.metadata.webcontents]\nroot = \u0022path/to/webproject\u0022\ntool = [\u0022npm\u0022, \u0022run\u0022, \u0022build\u0022]\n# ...\n\u0060\u0060\u0060\n\nThere is a similar set of tables at the package level at\n\u0060package.metadata\u0060. While cargo does not specify a\nformat for the content of either of these tables, it is suggested that\nexternal tools may wish to use them in a consistent fashion, such as referring\nto the data in \u0060workspace.metadata\u0060 if data is missing from \u0060package.metadata\u0060,\nif that makes sense for the tool in question.\n"
        },
        "package": {
          "$ref": "#/types/cargo:index:propertiesPackage"
        },
        "resolver": {
          "$ref": "#/types/cargo:index:definitionsResolver"
        }
      }
    }
  }
}