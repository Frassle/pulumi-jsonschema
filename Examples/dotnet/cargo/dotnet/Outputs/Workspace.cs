// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cargo.Outputs
{

    /// <summary>
    /// The `[workspace]` table in `Cargo.toml` defines which packages are members of
    /// the workspace:
    /// 
    /// ```toml
    /// [workspace]
    /// members = ["member1", "path/to/member2", "crates/*"]
    /// exclude = ["crates/foo", "path/to/other"]
    /// ```
    /// 
    /// An empty `[workspace]` table can be used with a `[package]` to conveniently
    /// create a workspace with the package and all of its path dependencies.
    /// 
    /// All [`path` dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-path-dependencies) residing in the workspace directory automatically
    /// become members. Additional members can be listed with the `members` key, which
    /// should be an array of strings containing directories with `Cargo.toml` files.
    /// 
    /// The `members` list also supports [globs](https://docs.rs/glob/0.3.0/glob/struct.Pattern.html) to match multiple paths, using
    /// typical filename glob patterns like `*` and `?`.
    /// 
    /// The `exclude` key can be used to prevent paths from being included in a
    /// workspace. This can be useful if some path dependencies aren't desired to be
    /// in the workspace at all, or using a glob pattern and you want to remove a
    /// directory.
    /// 
    /// An empty `[workspace]` table can be used with a `[package]` to conveniently
    /// create a workspace with the package and all of its path dependencies.
    /// </summary>
    [OutputType]
    public sealed class Workspace
    {
        public readonly ImmutableDictionary<string, object>? AdditionalProperties;
        /// <summary>
        /// The optional `default-members` key can be specified to set the members to
        /// operate on when in the workspace root and the package selection flags are not
        /// used:
        /// 
        /// ```toml
        /// [workspace]
        /// members = ["path/to/member1", "path/to/member2", "path/to/member3/*"]
        /// default-members = ["path/to/member2", "path/to/member3/foo"]
        /// ```
        /// 
        /// When specified, `default-members` must expand to a subset of `members`.
        /// </summary>
        public readonly ImmutableArray<string> DefaultMembers;
        /// <summary>
        /// The `workspace.dependencies` table is where you define dependencies to be
        /// inherited by members of a workspace.
        /// 
        /// Specifying a workspace dependency is similar to [package dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) except:
        /// - Dependencies from this table cannot be declared as `optional`
        /// - [`features`][features] declared in this table are additive with the `features` from `[dependencies]`
        /// 
        /// You can then [inherit the workspace dependency as a package dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace)
        /// 
        /// Example:
        /// ```toml
        /// # [PROJECT_DIR]/Cargo.toml
        /// [workspace]
        /// members = ["bar"]
        /// 
        /// [workspace.dependencies]
        /// cc = "1.0.73"
        /// rand = "0.8.5"
        /// regex = { version = "1.6.0", default-features = false, features = ["std"] }
        /// ```
        /// 
        /// ```toml
        /// # [PROJECT_DIR]/bar/Cargo.toml
        /// [package]
        /// name = "bar"
        /// version = "0.2.0"
        /// 
        /// [dependencies]
        /// regex = { workspace = true, features = ["unicode"] }
        /// 
        /// [build-dependencies]
        /// cc.workspace = true
        /// 
        /// [dev-dependencies]
        /// rand.workspace = true
        /// ```
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Dependencies;
        /// <summary>
        /// The `exclude` key can be used to prevent paths from being included in a
        /// workspace. This can be useful if some path dependencies aren't desired to be
        /// in the workspace at all, or using a glob pattern and you want to remove a
        /// directory.
        /// </summary>
        public readonly ImmutableArray<string> Exclude;
        /// <summary>
        /// All [`path` dependencies] residing in the workspace directory automatically
        /// become members. Additional members can be listed with the `members` key, which
        /// should be an array of strings containing directories with `Cargo.toml` files.
        /// 
        /// The `members` list also supports [globs] to match multiple paths, using
        /// typical filename glob patterns like `*` and `?`.
        /// </summary>
        public readonly ImmutableArray<string> Members;
        /// <summary>
        /// The `workspace.metadata` table is ignored by Cargo and will not be warned
        /// about. This section can be used for tools that would like to store workspace
        /// configuration in `Cargo.toml`. For example:
        /// 
        /// ```toml
        /// [workspace]
        /// members = ["member1", "member2"]
        /// 
        /// [workspace.metadata.webcontents]
        /// root = "path/to/webproject"
        /// tool = ["npm", "run", "build"]
        /// # ...
        /// ```
        /// 
        /// There is a similar set of tables at the package level at
        /// `package.metadata`. While cargo does not specify a
        /// format for the content of either of these tables, it is suggested that
        /// external tools may wish to use them in a consistent fashion, such as referring
        /// to the data in `workspace.metadata` if data is missing from `package.metadata`,
        /// if that makes sense for the tool in question.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Metadata;
        public readonly Outputs.PropertiesPackage? Package;
        public readonly Pulumi.Cargo.DefinitionsResolver? Resolver;

        [OutputConstructor]
        private Workspace(
            ImmutableDictionary<string, object>? additionalProperties,

            ImmutableArray<string> defaultMembers,

            ImmutableDictionary<string, object>? dependencies,

            ImmutableArray<string> exclude,

            ImmutableArray<string> members,

            ImmutableDictionary<string, object>? metadata,

            Outputs.PropertiesPackage? package,

            Pulumi.Cargo.DefinitionsResolver? resolver)
        {
            AdditionalProperties = additionalProperties;
            DefaultMembers = defaultMembers;
            Dependencies = dependencies;
            Exclude = exclude;
            Members = members;
            Metadata = metadata;
            Package = package;
            Resolver = resolver;
        }
    }
}
